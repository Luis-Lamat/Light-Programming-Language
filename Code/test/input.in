program lolz {

    var a:int

    var arr:[int]
    var arr2:[decimal](9)

    var global:int = 0

    function verifyAndOr(){

        # Outputs correct type mismatch error
        var a:string
        var b:string

        var i:int
        var j:int

        j = 3
        i = 2

        j += i
        i += 2

        a = "LOL"
        #BUG da error, unexpected token
        #a = a + "OK"

        #type mismatch
        #a = a + 8

    	if( 2 <  3 ) do
    		#a += 8 
    		a = "ifelse"
    		print("Truestuff")
    	end
    	else do
    		a = "else"
    		print("OTherStuff")
    	end

    	b = "COMIENZOELIF"


    	if( 27 <  35 ) do
    		#a += 8 
    		a = "ifelseElif"
    		print("Truestuff")
    	end
    	elsif (4 < 2) do
    		a = "elif"
    		print("OTherStuff")
    	end
    	else do
    		a = "else2"
    	end

    	b = "TERMINOELIF"

    	if( 1<2 and ((3 * 4.8) > 9 )) do
    		a = "ifsolo"
    		print("true")
            return
    	end

    	if( (1 + 4.0 > 5) and ( 4 != 2 or 4 > 3) and 5 >= 2 or 4 > 3) do
    		print("false")
    	end

        return
    }

    function emptyFunc() {
    }
  
    function example(x: int, y: int, z: decimal) returns int {
        # This is a comment
        if (1 < 2) do
            print("true") # printing
        end

        print("This")
        return 0
    }
    function noRetArg(num: int){
        var num2: int
        print(num2)
    }

    function sayText(text: string){
        var exam: string
        print(text)
    }
    function addOne(number: int) returns int {
        return number + 1
    }

    function printArray(numbers: int){
        # ERROR: 'element' is part of 'exp' rule (print)
        # foreach (element in numbers) do
        #     print(element) # '<======='
        # end
    }

    function sumTimes(first: int, last: int) returns int{

        var sum:int = 0 
        var s:string
        s = "STARTWHILE"
        while (first < last) do
            sum += 1
        	s = "INWHILE"
        end 
        s = "ENDWHILE"
              
        return sum
    }

    function sumNumbers(first: int, last: int) returns int{
        var sum:int = 0
        var index:int = 0
        var s:string
        s = "STARTFOR"
        for (sum = first; index < sum; index += 1) do
        	s = "INSIDEFIRSTFOR"
        	if(sum > 2) do
        		print("Greater")
        	end
            sum = 23 + index
        	sum += index
        	sum = sum + index
        	s = "BEFORERETURN"
        	return sum
        end
        s = "ENDFOR"
        print("true")
        print(sum)
        return sum
    }

    light() {
        var numberOne:int = addOne(number: 25)
        var xpos:int = 0
        var ypos:int = 0
        var t0:triangle


        var t1:triangle has
            v1: (1,2),
            v2: (2,4),
            v3: (4,5),
            color: green
        end


        var c1:circle has
        	posX: 3,
            posY: 9,
            size: 5,
            color: red
        end


        sayText(text: "hello")

        #verify and and or working
        verifyAndOr()

        # This line didnt work
        # var numArray:[int] = {1,2,3,4}
        # printArray(numbers: numArray)

        # sumTimes
        print(sumTimes(first:10, last:20))
        
        # sumNumbers
        print(sumNumbers(first:10, last:20))


        # camera
        # TODO: Make reserved words and syntax rules
        # window_size(width: 1000, height: 1000)
        # coordinates(x: 100, y: 100)
    
        # Arrays are troublesome!
        # var points:[point] = [5]

        #foreach (i in [1..5]) do 
        #    if(3 > 5) do
        #        xpos = 0
        #    end
        #    xpos += (7 * 8 / (9 + 9) * 5 / 2)
        #    ypos += 1
        #end 

        #camera points

        t0 has
            v1: (0,0),
            v2: (2,0),
            v3: (4,2),
            color: green
        end

        camera t0

        camera t1
  
        camera c1

        #action
        action move t1 do
            begins: 2,
            ends: 5,
            posX: 5,
            posY: 6
        end
        action move c1 do
            begins: 5,
            ends: 9,
            posX: 9,
            posY:10
        end
        action scale c1 do
            begins: 1,
            ends: 2,
            size: 5
        end
        action hide t1 do
            begins: 10,
            ends: 15
        end
        action show t1 do
            begins: 16,
            ends: 17
        end
        
    }
}