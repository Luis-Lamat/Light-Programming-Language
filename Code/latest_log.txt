
[Fri Apr 15 22:37:58 CDT 2016] =========================================== 
light_parser.py:324: SyntaxWarning: name 'param_counter' is used prior to global declaration
  global param_counter
> Operand Stack = []
> Operator Stack = []
> Type Stack = []
factor: 20
term: 20
exp: 20
ASSIGN A: 20
assignment: 20
factor: 22
term: 22
exp: 22
ASSIGN A: 22
assignment: 22
+=
factor: 23
term: 23
exp: 23
+=
+=
+=
factor: 32
term: 32
exp: 32
ASSIGN A: 32
assignment: 32
factor: 32
term: 32
exp: 32
factor: 32
term: 32
exp: 32
expresion: 32
expresion: 32
condition: 32
PUSH JUMP :
[9]
factor: 35
term: 35
exp: 35
ASSIGN A: 35
assignment: 35
factor: 35
term: 35
exp: 35
print 36
doBlock 37
factor: 39
term: 39
exp: 39
ASSIGN A: 39
assignment: 39
factor: 39
term: 39
exp: 39
print 40
doBlock 42
[12]
12
factor: 45
term: 45
exp: 45
ASSIGN A: 45
assignment: 45
factor: 45
term: 45
exp: 45
factor: 45
term: 45
exp: 45
expresion: 45
expresion: 45
condition: 45
PUSH JUMP :
[17]
factor: 48
term: 48
exp: 48
ASSIGN A: 48
assignment: 48
factor: 48
term: 48
exp: 48
print 49
doBlock 50
[17]
17
factor: 50
term: 50
exp: 50
factor: 50
term: 50
exp: 50
expresion: 50
expresion: 50
condition: 50
PUSH JUMP :
[21]
factor: 52
term: 52
exp: 52
ASSIGN A: 52
assignment: 52
factor: 52
term: 52
exp: 52
print 53
doBlock 54
factor: 56
term: 56
exp: 56
ASSIGN A: 56
assignment: 56
doBlock 58
[24]
24
factor: 60
term: 60
exp: 60
ASSIGN A: 60
assignment: 60
factor: 60
term: 60
exp: 60
factor: 60
term: 60
exp: 60
expresion: 60
expresion: 60
factor: 60
factor: 60
term: 60
term: 60
exp: 60
expresion: 60
condition: 60
factor: 60
term: 60
exp: 60
factor: 60
term: 60
exp: 60
expresion: 60
expresion: 60
condition: 60
factor: 60
term: 60
exp: 60
expresion: 60
condition: 60
condition: 60
PUSH JUMP :
[31]
factor: 62
term: 62
exp: 62
ASSIGN A: 62
assignment: 62
factor: 62
term: 62
exp: 62
print 63
doBlock 66
[31]
31
factor: 66
term: 66
factor: 66
term: 66
exp: 66
exp: 66
factor: 66
term: 66
exp: 66
expresion: 66
expresion: 66
condition: 66
factor: 66
term: 66
exp: 66
expresion: 66
factor: 66
term: 66
exp: 66
factor: 66
term: 66
exp: 66
expresion: 66
expresion: 66
factor: 66
term: 66
exp: 66
factor: 66
term: 66
exp: 66
expresion: 66
expresion: 66
condition: 66
condition: 66
factor: 66
term: 66
exp: 66
expresion: 66
factor: 66
term: 66
exp: 66
factor: 66
term: 66
exp: 66
expresion: 66
expresion: 66
factor: 66
term: 66
exp: 66
factor: 66
term: 66
exp: 66
expresion: 66
expresion: 66
condition: 66
condition: 66
condition: 66
condition: 66
PUSH JUMP :
[44]
factor: 67
term: 67
exp: 67
print 68
doBlock 70
[44]
44
okokok
3
factor: 78
term: 78
exp: 78
factor: 78
term: 78
exp: 78
expresion: 78
expresion: 78
condition: 78
PUSH JUMP :
[49]
factor: 79
term: 79
exp: 79
print 80
doBlock 82
[49]
49
factor: 82
term: 82
exp: 82
print 83
factor: 84
term: 84
exp: 84
factor: 87
term: 87
exp: 87
print 88
factor: 92
term: 92
exp: 92
print 93
okokok
2
factor: 95
term: 95
factor: 96
term: 96
exp: 96
exp: 96
okokok
2
> Operand Stack = [14000, 2001]
> Operator Stack = []
> Type Stack = [2, 2]
factor: 110
term: 110
exp: 110
ASSIGN A: 110
assignment: 110
factor: 110
term: 110
exp: 110
factor: 110
term: 110
exp: 110
expresion: 110
expresion: 110
condition: 110
+=
+=
factor: 113
term: 113
exp: 113
ASSIGN A: 113
assignment: 113
doBlock 114
cycle: 114
factor: 116
term: 116
exp: 116
ASSIGN A: 116
assignment: 116
factor: 117
term: 117
exp: 117
okokok
2
> Operand Stack = [14000, 2001, 'sum']
> Operator Stack = []
> Type Stack = [2, 2, 2]
> Operand Stack = [14000, 2001, 'sum']
> Operator Stack = []
> Type Stack = [2, 2, 2]
factor: 124
term: 124
exp: 124
ASSIGN A: 124
assignment: 124
factor: 124
term: 124
exp: 124
ASSIGN A: 124
assignment: 124
factor: 124
term: 124
exp: 124
factor: 124
term: 124
exp: 124
expresion: 124
expresion: 124
condition: 124
+=
+=
factor: 126
term: 126
exp: 126
ASSIGN A: 126
assignment: 126
factor: 126
term: 126
exp: 126
factor: 126
term: 126
exp: 126
expresion: 126
expresion: 126
condition: 126
PUSH JUMP :
[75, 75, 80]
factor: 127
term: 127
exp: 127
print 128
doBlock 129
[75, 75, 80]
80
factor: 129
term: 129
factor: 130
term: 130
exp: 130
exp: 130
ASSIGN A: 130
assignment: 130
+=
factor: 131
term: 131
exp: 131
+=
factor: 131
term: 131
factor: 132
term: 132
exp: 132
exp: 132
ASSIGN A: 132
assignment: 132
factor: 133
term: 133
exp: 133
ASSIGN A: 133
assignment: 133
factor: 134
term: 134
exp: 134
doBlock 135
for135
cycle: 135
factor: 136
term: 136
exp: 136
ASSIGN A: 136
assignment: 136
factor: 136
term: 136
exp: 136
print 137
factor: 137
term: 137
exp: 137
print 138
factor: 139
term: 139
exp: 139
> Operand Stack = [14000, 2001, 'sum', 'sum', 'sum']
> Operator Stack = []
> Type Stack = [2, 2, 2, 2, 2]
test: 142
factor: 142
term: 142
exp: 142
> Operand Stack = [14000, 2001, 'sum', 'sum']
> Operator Stack = []
> Type Stack = [2, 2, 2, 2]
> Operand Stack = [14000, 2001, 'sum', 'sum']
> Operator Stack = []
> Type Stack = [2, 2, 2, 2]
test: 147
factor: 147
term: 147
exp: 147
test: 150
test: 157
factor: 157
term: 157
exp: 157
factor: 157
term: 157
exp: 157
print 160
test: 160
factor: 160
term: 160
exp: 160
factor: 160
term: 160
exp: 160
print 171
factor: 172
term: 172
exp: 172
factor: 172
term: 172
exp: 172
expresion: 172
expresion: 172
condition: 172
PUSH JUMP :
[116]
factor: 174
term: 174
exp: 174
ASSIGN A: 174
assignment: 174
doBlock 175
[116]
116
+=
factor: 175
factor: 175
factor: 175
term: 175
factor: 175
term: 175
exp: 175
exp: 175
expresion: 175
condition: 175
factor: 175
factor: 175
factor: 175
term: 175
term: 175
term: 175
term: 175
term: 175
exp: 175
expresion: 175
condition: 175
factor: 176
term: 176
exp: 176
+=
+=
+=
doBlock 179
cycle: 179
factor: 182
term: 182
exp: 182
factor: 182
term: 182
exp: 182
factor: 183
term: 183
exp: 183
factor: 183
term: 183
exp: 183
factor: 184
term: 184
exp: 184
factor: 184
term: 184
exp: 184
factor: 191
term: 191
exp: 191
factor: 191
term: 191
exp: 191
factor: 192
term: 192
exp: 192
factor: 192
term: 192
exp: 192
factor: 193
term: 193
exp: 193
factor: 193
term: 193
exp: 193
factor: 200
term: 200
exp: 200
factor: 208
term: 208
exp: 208
factor: 209
term: 209
exp: 209
factor: 210
term: 210
exp: 210
factor: 212
term: 212
exp: 212
factor: 214
term: 214
exp: 214
factor: 215
term: 215
exp: 215
factor: 216
term: 216
exp: 216
factor: 218
term: 218
exp: 218
factor: 220
term: 220
exp: 220
factor: 221
term: 221
exp: 221
factor: 223
term: 223
exp: 223
factor: 225
term: 225
exp: 225
factor: 227
term: 227
exp: 227
factor: 229
term: 229
exp: 229
factor: 231
term: 231
exp: 231
sumNumbers:
	id: 9,
	name: sumNumbers,
	type: 2
	Params: [('first', 2), ('last', 2)]
	Starting quad index = 70
	VAR - index:
		id: 2003,
		name: index,
		type: 2,
		value: None
		---------
	VAR - sum:
		id: 2002,
		name: sum,
		type: 2,
		value: None
		---------
	VAR - last:
		id: 2001,
		name: last,
		type: 2,
		value: None
		---------
	VAR - s:
		id: 4000,
		name: s,
		type: 4,
		value: None
		---------
	VAR - first:
		id: 2000,
		name: first,
		type: 2,
		value: None
		---------
printArray:
	id: 7,
	name: printArray,
	type: 0
	Params: [('numbers', 2)]
	Starting quad index = 59
	VAR - numbers:
		id: 2000,
		name: numbers,
		type: 2,
		value: None
		---------
sumTimes:
	id: 8,
	name: sumTimes,
	type: 2
	Params: [('first', 2), ('last', 2)]
	Starting quad index = 60
	VAR - sum:
		id: 2002,
		name: sum,
		type: 2,
		value: None
		---------
	VAR - last:
		id: 2001,
		name: last,
		type: 2,
		value: None
		---------
	VAR - s:
		id: 4000,
		name: s,
		type: 4,
		value: None
		---------
	VAR - first:
		id: 2000,
		name: first,
		type: 2,
		value: None
		---------
sayText:
	id: 5,
	name: sayText,
	type: 0
	Params: [('text', 4)]
	Starting quad index = 55
	VAR - text:
		id: 4000,
		name: text,
		type: 4,
		value: None
		---------
	VAR - exam:
		id: 4001,
		name: exam,
		type: 4,
		value: None
		---------
addOne:
	id: 6,
	name: addOne,
	type: 2
	Params: [('number', 2)]
	Starting quad index = 57
	VAR - number:
		id: 2000,
		name: number,
		type: 2,
		value: None
		---------
example:
	id: 3,
	name: example,
	type: 3
	Params: [('x', 2), ('y', 2), ('z', 3)]
	Starting quad index = 48
	VAR - y:
		id: 2001,
		name: y,
		type: 2,
		value: None
		---------
	VAR - x:
		id: 2000,
		name: x,
		type: 2,
		value: None
		---------
	VAR - z:
		id: 3000,
		name: z,
		type: 3,
		value: None
		---------
emptyFunc:
	id: 2,
	name: emptyFunc,
	type: 0
	Params: []
	Starting quad index = 47
program:
	id: 0,
	name: program,
	type: 0
	Params: []
	Starting quad index = None
	VAR - a:
		id: -2000,
		name: a,
		type: 2,
		value: None
		---------
	VAR - arr:
		ARRAY! 
		id: 2001,
		name: arr,
		type: 2,
		length: 0
		[]
		---------
	VAR - global:
		id: -2002,
		name: global,
		type: 2,
		value: None
		---------
	VAR - arr2:
		ARRAY! 
		id: 3000,
		name: arr2,
		type: 3,
		length: 9
		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
		---------
light:
	id: 10,
	name: light,
	type: 0
	Params: []
	Starting quad index = 94
	VAR - numberOne:
		id: 2000,
		name: numberOne,
		type: 2,
		value: None
		---------
	VAR - xpos:
		id: 2001,
		name: xpos,
		type: 2,
		value: None
		---------
	VAR - ypos:
		id: 2002,
		name: ypos,
		type: 2,
		value: None
		---------
verifyAndOr:
	id: 1,
	name: verifyAndOr,
	type: 0
	Params: []
	Starting quad index = 1
	VAR - a:
		id: 4000,
		name: a,
		type: 4,
		value: None
		---------
	VAR - i:
		id: 2003,
		name: i,
		type: 2,
		value: None
		---------
	VAR - b:
		id: 4001,
		name: b,
		type: 4,
		value: None
		---------
	VAR - j:
		id: 2004,
		name: j,
		type: 2,
		value: None
		---------
noRetArg:
	id: 4,
	name: noRetArg,
	type: 0
	Params: [('num', 2)]
	Starting quad index = 53
	VAR - num:
		id: 2000,
		name: num,
		type: 2,
		value: None
		---------
	VAR - num2:
		id: 2001,
		name: num2,
		type: 2,
		value: None
		---------
Constants dict: {0: 14000, 1: 14016, 2: 14002, 3: 14001, 4: 14012, 5: 14021, '"else2"': 14014, 7: 14037, 8: 14038, 9: 14018, 10: 14035, '"BEFORERETURN"': 14031, '"ENDWHILE"': 14026, '"true"': 14020, 15: 14040, 16: 14041, 17: 14042, '"hello"': 14034, 20: 14036, '"STARTFOR"': 14027, 23: 14030, 25: 14033, 27: 14009, '"Truestuff"': 14005, 35: 14010, '"ifsolo"': 14019, '"INSIDEFIRSTFOR"': 14028, '"INWHILE"': 14025, 6: 14039, '"else"': 14006, '"elif"': 14013, '"LOL"': 14003, '"ifelse"': 14004, '"ifelseElif"': 14011, '"Greater"': 14029, '"COMIENZOELIF"': 14008, 4.8: 14017, '"STARTWHILE"': 14024, '"false"': 14022, '"This"': 14023, '"OTherStuff"': 14007, '"ENDFOR"': 14032, '"TERMINOELIF"': 14015}
Quads ===============================
0:	['=', 14000, None, 'global']
1:	['=', 14001, None, 'j']
2:	['=', 14002, None, 'i']
3:	['+', 'j', 'i', 2005]
4:	['=', 2005, None, 'j']
5:	['+', 'i', 14002, 2006]
6:	['=', 2006, None, 'i']
7:	['=', 14003, None, 'a']
8:	['<', 14002, 14001, 1000]
9:	['gotof', 1000, None, 13]
10:	['=', 14004, None, 'a']
11:	['print', None, None, 14005]
12:	['goto', None, None, 15]
13:	['=', 14006, None, 'a']
14:	['print', None, None, 14007]
15:	['=', 14008, None, 'b']
16:	['<', 14009, 14010, 1001]
17:	['gotof', 1001, None, 20]
18:	['=', 14011, None, 'a']
19:	['print', None, None, 14005]
20:	['<', 14012, 14002, 1002]
21:	['gotof', 1002, None, 25]
22:	['=', 14013, None, 'a']
23:	['print', None, None, 14007]
24:	['goto', None, None, 26]
25:	['=', 14014, None, 'a']
26:	['=', 14015, None, 'b']
27:	['<', 14016, 14002, 1003]
28:	['*', 14001, 14017, 3001]
29:	['>', 3001, 14018, 1004]
30:	['and', 1003, 1004, 1005]
31:	['gotof', 1005, None, 34]
32:	['=', 14019, None, 'a']
33:	['print', None, None, 14020]
34:	['+', 14016, 14012, 3002]
35:	['>', 3002, 14021, 1006]
36:	['!=', 14012, 14002, 1007]
37:	['>', 14012, 14001, 1008]
38:	['or', 1007, 1008, 1009]
39:	['and', 1006, 1009, 1010]
40:	['>=', 14021, 14002, 1011]
41:	['and', 1010, 1011, 1012]
42:	['>', 14012, 14001, 1013]
43:	['or', 1012, 1013, 1014]
44:	['gotof', 1014, None, 46]
45:	['print', None, None, 14022]
46:	['ret', None, None, None]
47:	['ret', None, None, None]
48:	['<', 14016, 14002, 1000]
49:	['gotof', 1000, None, 51]
50:	['print', None, None, 14020]
51:	['print', None, None, 14023]
52:	['ret', None, None, None]
53:	['print', None, None, 'num2']
54:	['ret', None, None, None]
55:	['print', None, None, 'text']
56:	['ret', None, None, None]
57:	['+', 'number', 14016, 2001]
58:	['ret', None, None, None]
59:	['ret', None, None, None]
60:	['=', 14000, None, 'sum']
61:	['=', 14024, None, 's']
62:	['<', 'first', 'last', 1000]
63:	['gotof', 1000, None, 68]
64:	['+', 'sum', 14016, 2003]
65:	['=', 2003, None, 'sum']
66:	['=', 14025, None, 's']
67:	['goto', None, None, 62]
68:	['=', 14026, None, 's']
69:	['ret', None, None, None]
70:	['=', 14000, None, 'sum']
71:	['=', 14000, None, 'index']
72:	['=', 14027, None, 's']
73:	['=', 'first', None, 'sum']
74:	['<', 'index', 'sum', 1000]
75:	['gotof', 1000, None, 90]
76:	['+', 'index', 14016, 2004]
77:	['=', 2004, None, 'index']
78:	['=', 14028, None, 's']
79:	['>', 'sum', 14002, 1001]
80:	['gotof', 1001, None, 82]
81:	['print', None, None, 14029]
82:	['+', 14030, 'index', 2005]
83:	['=', 2005, None, 'sum']
84:	['+', 'sum', 'index', 2006]
85:	['=', 2006, None, 'sum']
86:	['+', 'sum', 'index', 2007]
87:	['=', 2007, None, 'sum']
88:	['=', 14031, None, 's']
89:	['goto', None, None, 74]
90:	['=', 14032, None, 's']
91:	['print', None, None, 14020]
92:	['print', None, None, 'sum']
93:	['ret', None, None, None]
94:	['era', 'addOne', None, None]
95:	['param', 14033, None, 0]
96:	['gosub', 'addOne', None, 57]
97:	['=', 'numberOne', None, 'sum']
98:	['=', 14000, None, 'xpos']
99:	['=', 14000, None, 'ypos']
100:	['era', 'sayText', None, None]
101:	['param', 14034, None, 0]
102:	['gosub', 'sayText', None, 55]
103:	['era', 'verifyAndOr', None, None]
104:	['gosub', 'verifyAndOr', None, 1]
105:	['era', 'sumTimes', None, None]
106:	['param', 14035, None, 0]
107:	['param', 14036, None, 1]
108:	['gosub', 'sumTimes', None, 60]
109:	['print', None, None, 'sum']
110:	['era', 'sumNumbers', None, None]
111:	['param', 14035, None, 0]
112:	['param', 14036, None, 1]
113:	['gosub', 'sumNumbers', None, 70]
114:	['print', None, None, 'sum']
115:	['>', 14001, 14021, 1000]
116:	['gotof', 1000, None, 118]
117:	['=', 14000, None, 'xpos']
118:	['*', 14037, 14038, 2003]
119:	['+', 14018, 14018, 2004]
120:	['/', 2003, 2004, 2005]
121:	['*', 2005, 14021, 2006]
122:	['/', 2006, 14002, 2007]
123:	['+', 'xpos', 2007, 2008]
124:	['=', 2008, None, 'xpos']
125:	['+', 'ypos', 14016, 2009]
126:	['=', 2009, None, 'ypos']
127:	['end', None, None, None]
Successful
