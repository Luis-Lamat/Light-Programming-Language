Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    INT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET
Rule 2     pr_a -> vars pr_a
Rule 3     pr_a -> epsilon
Rule 4     pr_b -> function pr_b
Rule 5     pr_b -> epsilon
Rule 6     main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET
Rule 7     m_a -> statement m_a
Rule 8     m_a -> epsilon
Rule 9     type -> primitive
Rule 10    type -> figure
Rule 11    type -> epsilon
Rule 12    primitive -> VAR_BOOLEAN
Rule 13    primitive -> VAR_INT
Rule 14    primitive -> VAR_DECIMAL
Rule 15    primitive -> VAR_STRING
Rule 16    primitive -> VAR_FRACTION
Rule 17    figure -> POINT
Rule 18    figure -> LINE
Rule 19    figure -> TRIANGLE
Rule 20    figure -> SQUARE
Rule 21    figure -> RECTANGLE
Rule 22    figure -> POLYGON
Rule 23    figure -> STAR
Rule 24    figure -> CIRCLE
Rule 25    function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET
Rule 26    func_a -> parameters
Rule 27    func_a -> epsilon
Rule 28    func_b -> RETURNS type
Rule 29    func_b -> epsilon
Rule 30    func_c -> vars func_c
Rule 31    func_c -> epsilon
Rule 32    stmt_loop -> statement stmt_loop
Rule 33    stmt_loop -> epsilon
Rule 34    parameters -> VAR_IDENTIFIER SEP_COLON type param_a
Rule 35    param_a -> SEP_COMMA
Rule 36    param_a -> epsilon
Rule 37    assignment -> VAR_IDENTIFIER OP_EQUALS exp
Rule 38    cycle -> loop cyc_a
Rule 39    cycle -> for_each cyc_a
Rule 40    cycle -> for cyc_a
Rule 41    cyc_a -> do_block
Rule 42    loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
Rule 43    l_a -> VAR_INT
Rule 44    l_a -> VAR_IDENTIFIER
Rule 45    for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
Rule 46    fore_a -> VAR_IDENTIFIER
Rule 47    for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
Rule 48    for_a -> assignment
Rule 49    for_a -> epsilon
Rule 50    for_b -> increment
Rule 51    for_b -> assignment
Rule 52    action -> ACTION act_a
Rule 53    act_a -> act_move
Rule 54    act_a -> act_scale
Rule 55    act_a -> act_visible
Rule 56    act_a -> act_rotate
Rule 57    act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA
Rule 58    act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END
Rule 59    act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END
Rule 60    act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END
Rule 61    act_visible -> HIDE act_header END
Rule 62    act_visible -> SHOW act_header END
Rule 63    camera -> CAMERA VAR_IDENTIFIER
Rule 64    condition -> exp ex_a
Rule 65    condition -> exp
Rule 66    ex_a -> OP_LESS_THAN exp
Rule 67    ex_a -> OP_GREATER_THAN exp
Rule 68    ex_a -> OP_NOT_EQUAL exp
Rule 69    ex_a -> OP_EQUALS exp
Rule 70    ex_a -> OP_GREATER_EQUAL exp
Rule 71    ex_a -> OP_LESS_EQUAL exp
Rule 72    exp -> term exp_a
Rule 73    exp_a -> exp_b
Rule 74    exp_a -> epsilon
Rule 75    exp_b -> term exp_c exp_d
Rule 76    exp_c -> OP_PLUS
Rule 77    exp_c -> OP_MINUS
Rule 78    exp_d -> exp_b
Rule 79    exp_d -> epsilon
Rule 80    term -> factor term_a
Rule 81    term_a -> term_b
Rule 82    term_a -> epsilon
Rule 83    term_b -> factor term_c term_d
Rule 84    term_c -> OP_TIMES
Rule 85    term_c -> OP_DIVISION
Rule 86    term_d -> term_b
Rule 87    term_d -> epsilon
Rule 88    factor -> VAR_IDENTIFIER
Rule 89    factor -> cnt_prim
Rule 90    factor -> SEP_LPAR exp SEP_RPAR
Rule 91    increment -> VAR_IDENTIFIER inc_a exp
Rule 92    inc_a -> OP_PLUS_EQUALS
Rule 93    inc_a -> OP_MINUS_EQUALS
Rule 94    if -> IF condition_block if_a if_b
Rule 95    if_a -> elsif
Rule 96    if_a -> epsilon
Rule 97    if_b -> else
Rule 98    if_b -> epsilon
Rule 99    elsif -> ELSIF condition_block
Rule 100   else -> ELSE do_block
Rule 101   condition_block -> SEP_LPAR condition SEP_RPAR do_block
Rule 102   do_block -> DO stmt_loop END
Rule 103   statement -> assignment
Rule 104   statement -> if
Rule 105   statement -> cycle
Rule 106   statement -> action
Rule 107   statement -> camera
Rule 108   statement -> comments
Rule 109   statement -> print
Rule 110   statement -> figure_creations
Rule 111   statement -> return
Rule 112   var_a -> VAR_IDENTIFIER var_b
Rule 113   var_b -> SEP_COMMA var_a
Rule 114   var_b -> epsilon
Rule 115   vars -> vars_start v_a
Rule 116   v_a -> vars_figs
Rule 117   v_a -> vars_prim
Rule 118   vars_start -> VAR vs_a SEP_COLON
Rule 119   vs_a -> VAR_IDENTIFIER vs_b
Rule 120   vs_b -> SEP_COMMA vs_a
Rule 121   vs_b -> epsilon
Rule 122   vars_figs -> figure vf_a
Rule 123   vf_a -> init_fig
Rule 124   vf_a -> epsilon
Rule 125   vars_prim -> primitive var_p_a
Rule 126   var_p_a -> init_prim
Rule 127   var_p_a -> epsilon
Rule 128   init_prim -> OP_EQUALS init_a
Rule 129   init_a -> VAR_IDENTIFIER
Rule 130   init_a -> cnt_prim
Rule 131   init_fig -> OP_EQUALS VAR_IDENTIFIER
Rule 132   init_fig -> HAS fig_create_block
Rule 133   fig_create_block -> fig_a END
Rule 134   fig_a -> fig_attr fig_b
Rule 135   fig_b -> SEP_COMMA fig_a
Rule 136   fig_b -> epsilon
Rule 137   fig_attr -> vector
Rule 138   fig_attr -> COLOR SEP_COLON VAR_IDENTIFIER
Rule 139   fig_attr -> SIZE SEP_COLON exp
Rule 140   vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR
Rule 141   cnt_prim -> VAR_INT
Rule 142   cnt_prim -> VAR_DECIMAL
Rule 143   cnt_prim -> VAR_FRACTION
Rule 144   return -> RETURN exp
Rule 145   comments -> SEP_HASHTAG co_a
Rule 146   co_a -> VAR_ANYCHAR co_a
Rule 147   co_a -> epsilon
Rule 148   print -> PRINT SEP_LPAR prin_a SEP_RPAR
Rule 149   prin_a -> exp
Rule 150   prin_a -> VAR_STRING
Rule 151   figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
Rule 152   epsilon -> <empty>

Terminals, with rules where they appear

ACTION               : 52
ANGLE                : 60
BEGINS               : 57
CAMERA               : 63
CIRCLE               : 24
COLOR                : 138
DO                   : 57 102
ELSE                 : 100
ELSIF                : 99
END                  : 58 59 60 61 62 102 133
ENDS                 : 57
FOR                  : 47
FOR_EACH             : 45
FUNCTION             : 25
HAS                  : 132 151
HIDE                 : 61
IF                   : 94
IN                   : 45
INT                  : 
LIGHT_TOKEN          : 6
LINE                 : 18
LOOP                 : 42
MOVE                 : 58
OP_DIVISION          : 85
OP_EQUALS            : 37 69 128 131
OP_GREATER_EQUAL     : 70
OP_GREATER_THAN      : 67
OP_LESS_EQUAL        : 71
OP_LESS_THAN         : 66
OP_MINUS             : 77
OP_MINUS_EQUALS      : 93
OP_NOT_EQUAL         : 68
OP_PLUS              : 76
OP_PLUS_EQUALS       : 92
OP_TIMES             : 84
POINT                : 17
POLYGON              : 22
POS_X                : 58
POS_Y                : 58
PRINT                : 148
PROGRAM              : 1
RECTANGLE            : 21
RETURN               : 144
RETURNS              : 28
SCALE                : 59 60
SEP_COLON            : 34 57 57 58 58 59 60 118 138 139 140 151
SEP_COMMA            : 35 57 57 58 59 60 113 120 135 140
SEP_DOT              : 42 42
SEP_HASHTAG          : 145
SEP_LCBRACKET        : 1 6 25 45 47
SEP_LPAR             : 6 25 42 45 47 90 101 140 148
SEP_RCBRACKET        : 1 6 25 45 47
SEP_RPAR             : 6 25 42 45 47 90 101 140 148
SEP_SEMICOLON        : 47 47
SHOW                 : 62
SIZE                 : 59 139
SQUARE               : 20
STAR                 : 23
TRIANGLE             : 19
VAR                  : 118 151
VAR_ANYCHAR          : 146
VAR_BOOLEAN          : 12
VAR_DECIMAL          : 14 142
VAR_FRACTION         : 16 143
VAR_IDENTIFIER       : 1 25 34 37 44 45 46 57 63 88 91 112 119 129 131 138 151
VAR_INT              : 13 43 141
VAR_STRING           : 15 150
VAR_VECTORID         : 140
error                : 

Nonterminals, with rules where they appear

act_a                : 52
act_header           : 58 59 60 61 62
act_move             : 53
act_rotate           : 56
act_scale            : 54
act_visible          : 55
action               : 106
assignment           : 48 51 103
camera               : 107
cnt_prim             : 89 130
co_a                 : 145 146
comments             : 108
condition            : 47 101
condition_block      : 94 99
cyc_a                : 38 39 40
cycle                : 105
do_block             : 41 42 100 101
else                 : 97
elsif                : 95
epsilon              : 3 5 8 11 27 29 31 33 36 49 74 79 82 87 96 98 114 121 124 127 136 147
ex_a                 : 64
exp                  : 37 57 57 58 58 59 60 64 65 66 67 68 69 70 71 90 91 139 140 140 144 149
exp_a                : 72
exp_b                : 73 78
exp_c                : 75
exp_d                : 75
factor               : 80 83
fig_a                : 133 135
fig_attr             : 134
fig_b                : 134
fig_create_block     : 132 151
figure               : 10 122 151
figure_creations     : 110
for                  : 40
for_a                : 47
for_b                : 47
for_each             : 39
fore_a               : 45
func_a               : 25
func_b               : 25
func_c               : 25 30
function             : 4
if                   : 104
if_a                 : 94
if_b                 : 94
inc_a                : 91
increment            : 50
init_a               : 128
init_fig             : 123
init_prim            : 126
l_a                  : 42 42
loop                 : 38
m_a                  : 6 7
main_func            : 1
param_a              : 34
parameters           : 26
pr_a                 : 1 2
pr_b                 : 1 4
primitive            : 9 125
prin_a               : 148
print                : 109
program              : 0
return               : 111
statement            : 7 32
stmt_loop            : 25 32 45 47 102
term                 : 72 75
term_a               : 80
term_b               : 81 86
term_c               : 83
term_d               : 83
type                 : 28 34
v_a                  : 115
var_a                : 113
var_b                : 112
var_p_a              : 125
vars                 : 2 30
vars_figs            : 116
vars_prim            : 117
vars_start           : 115
vector               : 137
vf_a                 : 122
vs_a                 : 118 120
vs_b                 : 119

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET

    VAR_IDENTIFIER  shift and go to state 3


state 3

    (1) program -> PROGRAM VAR_IDENTIFIER . SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET

    SEP_LCBRACKET   shift and go to state 4


state 4

    (1) program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET . pr_a pr_b main_func SEP_RCBRACKET
    (2) pr_a -> . vars pr_a
    (3) pr_a -> . epsilon
    (115) vars -> . vars_start v_a
    (152) epsilon -> .
    (118) vars_start -> . VAR vs_a SEP_COLON

    FUNCTION        reduce using rule 152 (epsilon -> .)
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)
    VAR             shift and go to state 9

    vars                           shift and go to state 5
    epsilon                        shift and go to state 6
    pr_a                           shift and go to state 7
    vars_start                     shift and go to state 8

state 5

    (2) pr_a -> vars . pr_a
    (2) pr_a -> . vars pr_a
    (3) pr_a -> . epsilon
    (115) vars -> . vars_start v_a
    (152) epsilon -> .
    (118) vars_start -> . VAR vs_a SEP_COLON

    FUNCTION        reduce using rule 152 (epsilon -> .)
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)
    VAR             shift and go to state 9

    vars                           shift and go to state 5
    epsilon                        shift and go to state 6
    pr_a                           shift and go to state 10
    vars_start                     shift and go to state 8

state 6

    (3) pr_a -> epsilon .

    FUNCTION        reduce using rule 3 (pr_a -> epsilon .)
    LIGHT_TOKEN     reduce using rule 3 (pr_a -> epsilon .)


state 7

    (1) program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a . pr_b main_func SEP_RCBRACKET
    (4) pr_b -> . function pr_b
    (5) pr_b -> . epsilon
    (25) function -> . FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET
    (152) epsilon -> .

    FUNCTION        shift and go to state 12
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)

    function                       shift and go to state 11
    epsilon                        shift and go to state 13
    pr_b                           shift and go to state 14

state 8

    (115) vars -> vars_start . v_a
    (116) v_a -> . vars_figs
    (117) v_a -> . vars_prim
    (122) vars_figs -> . figure vf_a
    (125) vars_prim -> . primitive var_p_a
    (17) figure -> . POINT
    (18) figure -> . LINE
    (19) figure -> . TRIANGLE
    (20) figure -> . SQUARE
    (21) figure -> . RECTANGLE
    (22) figure -> . POLYGON
    (23) figure -> . STAR
    (24) figure -> . CIRCLE
    (12) primitive -> . VAR_BOOLEAN
    (13) primitive -> . VAR_INT
    (14) primitive -> . VAR_DECIMAL
    (15) primitive -> . VAR_STRING
    (16) primitive -> . VAR_FRACTION

    POINT           shift and go to state 21
    LINE            shift and go to state 30
    TRIANGLE        shift and go to state 22
    SQUARE          shift and go to state 17
    RECTANGLE       shift and go to state 32
    POLYGON         shift and go to state 19
    STAR            shift and go to state 27
    CIRCLE          shift and go to state 25
    VAR_BOOLEAN     shift and go to state 24
    VAR_INT         shift and go to state 26
    VAR_DECIMAL     shift and go to state 15
    VAR_STRING      shift and go to state 23
    VAR_FRACTION    shift and go to state 29

    primitive                      shift and go to state 16
    vars_prim                      shift and go to state 18
    figure                         shift and go to state 20
    v_a                            shift and go to state 28
    vars_figs                      shift and go to state 31

state 9

    (118) vars_start -> VAR . vs_a SEP_COLON
    (119) vs_a -> . VAR_IDENTIFIER vs_b

    VAR_IDENTIFIER  shift and go to state 34

    vs_a                           shift and go to state 33

state 10

    (2) pr_a -> vars pr_a .

    FUNCTION        reduce using rule 2 (pr_a -> vars pr_a .)
    LIGHT_TOKEN     reduce using rule 2 (pr_a -> vars pr_a .)


state 11

    (4) pr_b -> function . pr_b
    (4) pr_b -> . function pr_b
    (5) pr_b -> . epsilon
    (25) function -> . FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET
    (152) epsilon -> .

    FUNCTION        shift and go to state 12
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)

    function                       shift and go to state 11
    epsilon                        shift and go to state 13
    pr_b                           shift and go to state 35

state 12

    (25) function -> FUNCTION . VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET

    VAR_IDENTIFIER  shift and go to state 36


state 13

    (5) pr_b -> epsilon .

    LIGHT_TOKEN     reduce using rule 5 (pr_b -> epsilon .)


state 14

    (1) program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b . main_func SEP_RCBRACKET
    (6) main_func -> . LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET

    LIGHT_TOKEN     shift and go to state 37

    main_func                      shift and go to state 38

state 15

    (14) primitive -> VAR_DECIMAL .

    SEP_COMMA       reduce using rule 14 (primitive -> VAR_DECIMAL .)
    SEP_RPAR        reduce using rule 14 (primitive -> VAR_DECIMAL .)
    SEP_LCBRACKET   reduce using rule 14 (primitive -> VAR_DECIMAL .)
    OP_EQUALS       reduce using rule 14 (primitive -> VAR_DECIMAL .)
    VAR             reduce using rule 14 (primitive -> VAR_DECIMAL .)
    FUNCTION        reduce using rule 14 (primitive -> VAR_DECIMAL .)
    LIGHT_TOKEN     reduce using rule 14 (primitive -> VAR_DECIMAL .)
    VAR_IDENTIFIER  reduce using rule 14 (primitive -> VAR_DECIMAL .)
    IF              reduce using rule 14 (primitive -> VAR_DECIMAL .)
    ACTION          reduce using rule 14 (primitive -> VAR_DECIMAL .)
    CAMERA          reduce using rule 14 (primitive -> VAR_DECIMAL .)
    SEP_HASHTAG     reduce using rule 14 (primitive -> VAR_DECIMAL .)
    PRINT           reduce using rule 14 (primitive -> VAR_DECIMAL .)
    RETURN          reduce using rule 14 (primitive -> VAR_DECIMAL .)
    LOOP            reduce using rule 14 (primitive -> VAR_DECIMAL .)
    FOR_EACH        reduce using rule 14 (primitive -> VAR_DECIMAL .)
    FOR             reduce using rule 14 (primitive -> VAR_DECIMAL .)
    SEP_RCBRACKET   reduce using rule 14 (primitive -> VAR_DECIMAL .)


state 16

    (125) vars_prim -> primitive . var_p_a
    (126) var_p_a -> . init_prim
    (127) var_p_a -> . epsilon
    (128) init_prim -> . OP_EQUALS init_a
    (152) epsilon -> .

    OP_EQUALS       shift and go to state 40
    VAR             reduce using rule 152 (epsilon -> .)
    FUNCTION        reduce using rule 152 (epsilon -> .)
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)

    init_prim                      shift and go to state 41
    epsilon                        shift and go to state 39
    var_p_a                        shift and go to state 42

state 17

    (20) figure -> SQUARE .

    SEP_LCBRACKET   reduce using rule 20 (figure -> SQUARE .)
    OP_EQUALS       reduce using rule 20 (figure -> SQUARE .)
    HAS             reduce using rule 20 (figure -> SQUARE .)
    VAR             reduce using rule 20 (figure -> SQUARE .)
    FUNCTION        reduce using rule 20 (figure -> SQUARE .)
    LIGHT_TOKEN     reduce using rule 20 (figure -> SQUARE .)
    VAR_IDENTIFIER  reduce using rule 20 (figure -> SQUARE .)
    IF              reduce using rule 20 (figure -> SQUARE .)
    ACTION          reduce using rule 20 (figure -> SQUARE .)
    CAMERA          reduce using rule 20 (figure -> SQUARE .)
    SEP_HASHTAG     reduce using rule 20 (figure -> SQUARE .)
    PRINT           reduce using rule 20 (figure -> SQUARE .)
    RETURN          reduce using rule 20 (figure -> SQUARE .)
    LOOP            reduce using rule 20 (figure -> SQUARE .)
    FOR_EACH        reduce using rule 20 (figure -> SQUARE .)
    FOR             reduce using rule 20 (figure -> SQUARE .)
    SEP_RCBRACKET   reduce using rule 20 (figure -> SQUARE .)
    SEP_COMMA       reduce using rule 20 (figure -> SQUARE .)
    SEP_RPAR        reduce using rule 20 (figure -> SQUARE .)


state 18

    (117) v_a -> vars_prim .

    VAR             reduce using rule 117 (v_a -> vars_prim .)
    FUNCTION        reduce using rule 117 (v_a -> vars_prim .)
    LIGHT_TOKEN     reduce using rule 117 (v_a -> vars_prim .)
    VAR_IDENTIFIER  reduce using rule 117 (v_a -> vars_prim .)
    IF              reduce using rule 117 (v_a -> vars_prim .)
    ACTION          reduce using rule 117 (v_a -> vars_prim .)
    CAMERA          reduce using rule 117 (v_a -> vars_prim .)
    SEP_HASHTAG     reduce using rule 117 (v_a -> vars_prim .)
    PRINT           reduce using rule 117 (v_a -> vars_prim .)
    RETURN          reduce using rule 117 (v_a -> vars_prim .)
    LOOP            reduce using rule 117 (v_a -> vars_prim .)
    FOR_EACH        reduce using rule 117 (v_a -> vars_prim .)
    FOR             reduce using rule 117 (v_a -> vars_prim .)
    SEP_RCBRACKET   reduce using rule 117 (v_a -> vars_prim .)


state 19

    (22) figure -> POLYGON .

    SEP_LCBRACKET   reduce using rule 22 (figure -> POLYGON .)
    OP_EQUALS       reduce using rule 22 (figure -> POLYGON .)
    HAS             reduce using rule 22 (figure -> POLYGON .)
    VAR             reduce using rule 22 (figure -> POLYGON .)
    FUNCTION        reduce using rule 22 (figure -> POLYGON .)
    LIGHT_TOKEN     reduce using rule 22 (figure -> POLYGON .)
    VAR_IDENTIFIER  reduce using rule 22 (figure -> POLYGON .)
    IF              reduce using rule 22 (figure -> POLYGON .)
    ACTION          reduce using rule 22 (figure -> POLYGON .)
    CAMERA          reduce using rule 22 (figure -> POLYGON .)
    SEP_HASHTAG     reduce using rule 22 (figure -> POLYGON .)
    PRINT           reduce using rule 22 (figure -> POLYGON .)
    RETURN          reduce using rule 22 (figure -> POLYGON .)
    LOOP            reduce using rule 22 (figure -> POLYGON .)
    FOR_EACH        reduce using rule 22 (figure -> POLYGON .)
    FOR             reduce using rule 22 (figure -> POLYGON .)
    SEP_RCBRACKET   reduce using rule 22 (figure -> POLYGON .)
    SEP_COMMA       reduce using rule 22 (figure -> POLYGON .)
    SEP_RPAR        reduce using rule 22 (figure -> POLYGON .)


state 20

    (122) vars_figs -> figure . vf_a
    (123) vf_a -> . init_fig
    (124) vf_a -> . epsilon
    (131) init_fig -> . OP_EQUALS VAR_IDENTIFIER
    (132) init_fig -> . HAS fig_create_block
    (152) epsilon -> .

    OP_EQUALS       shift and go to state 45
    HAS             shift and go to state 46
    VAR             reduce using rule 152 (epsilon -> .)
    FUNCTION        reduce using rule 152 (epsilon -> .)
    LIGHT_TOKEN     reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)

    init_fig                       shift and go to state 43
    vf_a                           shift and go to state 47
    epsilon                        shift and go to state 44

state 21

    (17) figure -> POINT .

    SEP_LCBRACKET   reduce using rule 17 (figure -> POINT .)
    OP_EQUALS       reduce using rule 17 (figure -> POINT .)
    HAS             reduce using rule 17 (figure -> POINT .)
    VAR             reduce using rule 17 (figure -> POINT .)
    FUNCTION        reduce using rule 17 (figure -> POINT .)
    LIGHT_TOKEN     reduce using rule 17 (figure -> POINT .)
    VAR_IDENTIFIER  reduce using rule 17 (figure -> POINT .)
    IF              reduce using rule 17 (figure -> POINT .)
    ACTION          reduce using rule 17 (figure -> POINT .)
    CAMERA          reduce using rule 17 (figure -> POINT .)
    SEP_HASHTAG     reduce using rule 17 (figure -> POINT .)
    PRINT           reduce using rule 17 (figure -> POINT .)
    RETURN          reduce using rule 17 (figure -> POINT .)
    LOOP            reduce using rule 17 (figure -> POINT .)
    FOR_EACH        reduce using rule 17 (figure -> POINT .)
    FOR             reduce using rule 17 (figure -> POINT .)
    SEP_RCBRACKET   reduce using rule 17 (figure -> POINT .)
    SEP_COMMA       reduce using rule 17 (figure -> POINT .)
    SEP_RPAR        reduce using rule 17 (figure -> POINT .)


state 22

    (19) figure -> TRIANGLE .

    SEP_LCBRACKET   reduce using rule 19 (figure -> TRIANGLE .)
    OP_EQUALS       reduce using rule 19 (figure -> TRIANGLE .)
    HAS             reduce using rule 19 (figure -> TRIANGLE .)
    VAR             reduce using rule 19 (figure -> TRIANGLE .)
    FUNCTION        reduce using rule 19 (figure -> TRIANGLE .)
    LIGHT_TOKEN     reduce using rule 19 (figure -> TRIANGLE .)
    VAR_IDENTIFIER  reduce using rule 19 (figure -> TRIANGLE .)
    IF              reduce using rule 19 (figure -> TRIANGLE .)
    ACTION          reduce using rule 19 (figure -> TRIANGLE .)
    CAMERA          reduce using rule 19 (figure -> TRIANGLE .)
    SEP_HASHTAG     reduce using rule 19 (figure -> TRIANGLE .)
    PRINT           reduce using rule 19 (figure -> TRIANGLE .)
    RETURN          reduce using rule 19 (figure -> TRIANGLE .)
    LOOP            reduce using rule 19 (figure -> TRIANGLE .)
    FOR_EACH        reduce using rule 19 (figure -> TRIANGLE .)
    FOR             reduce using rule 19 (figure -> TRIANGLE .)
    SEP_RCBRACKET   reduce using rule 19 (figure -> TRIANGLE .)
    SEP_COMMA       reduce using rule 19 (figure -> TRIANGLE .)
    SEP_RPAR        reduce using rule 19 (figure -> TRIANGLE .)


state 23

    (15) primitive -> VAR_STRING .

    SEP_COMMA       reduce using rule 15 (primitive -> VAR_STRING .)
    SEP_RPAR        reduce using rule 15 (primitive -> VAR_STRING .)
    SEP_LCBRACKET   reduce using rule 15 (primitive -> VAR_STRING .)
    OP_EQUALS       reduce using rule 15 (primitive -> VAR_STRING .)
    VAR             reduce using rule 15 (primitive -> VAR_STRING .)
    FUNCTION        reduce using rule 15 (primitive -> VAR_STRING .)
    LIGHT_TOKEN     reduce using rule 15 (primitive -> VAR_STRING .)
    VAR_IDENTIFIER  reduce using rule 15 (primitive -> VAR_STRING .)
    IF              reduce using rule 15 (primitive -> VAR_STRING .)
    ACTION          reduce using rule 15 (primitive -> VAR_STRING .)
    CAMERA          reduce using rule 15 (primitive -> VAR_STRING .)
    SEP_HASHTAG     reduce using rule 15 (primitive -> VAR_STRING .)
    PRINT           reduce using rule 15 (primitive -> VAR_STRING .)
    RETURN          reduce using rule 15 (primitive -> VAR_STRING .)
    LOOP            reduce using rule 15 (primitive -> VAR_STRING .)
    FOR_EACH        reduce using rule 15 (primitive -> VAR_STRING .)
    FOR             reduce using rule 15 (primitive -> VAR_STRING .)
    SEP_RCBRACKET   reduce using rule 15 (primitive -> VAR_STRING .)


state 24

    (12) primitive -> VAR_BOOLEAN .

    SEP_COMMA       reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    SEP_RPAR        reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    SEP_LCBRACKET   reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    OP_EQUALS       reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    VAR             reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    FUNCTION        reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    LIGHT_TOKEN     reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    VAR_IDENTIFIER  reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    IF              reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    ACTION          reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    CAMERA          reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    SEP_HASHTAG     reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    PRINT           reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    RETURN          reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    LOOP            reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    FOR_EACH        reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    FOR             reduce using rule 12 (primitive -> VAR_BOOLEAN .)
    SEP_RCBRACKET   reduce using rule 12 (primitive -> VAR_BOOLEAN .)


state 25

    (24) figure -> CIRCLE .

    SEP_LCBRACKET   reduce using rule 24 (figure -> CIRCLE .)
    OP_EQUALS       reduce using rule 24 (figure -> CIRCLE .)
    HAS             reduce using rule 24 (figure -> CIRCLE .)
    VAR             reduce using rule 24 (figure -> CIRCLE .)
    FUNCTION        reduce using rule 24 (figure -> CIRCLE .)
    LIGHT_TOKEN     reduce using rule 24 (figure -> CIRCLE .)
    VAR_IDENTIFIER  reduce using rule 24 (figure -> CIRCLE .)
    IF              reduce using rule 24 (figure -> CIRCLE .)
    ACTION          reduce using rule 24 (figure -> CIRCLE .)
    CAMERA          reduce using rule 24 (figure -> CIRCLE .)
    SEP_HASHTAG     reduce using rule 24 (figure -> CIRCLE .)
    PRINT           reduce using rule 24 (figure -> CIRCLE .)
    RETURN          reduce using rule 24 (figure -> CIRCLE .)
    LOOP            reduce using rule 24 (figure -> CIRCLE .)
    FOR_EACH        reduce using rule 24 (figure -> CIRCLE .)
    FOR             reduce using rule 24 (figure -> CIRCLE .)
    SEP_RCBRACKET   reduce using rule 24 (figure -> CIRCLE .)
    SEP_COMMA       reduce using rule 24 (figure -> CIRCLE .)
    SEP_RPAR        reduce using rule 24 (figure -> CIRCLE .)


state 26

    (13) primitive -> VAR_INT .

    SEP_COMMA       reduce using rule 13 (primitive -> VAR_INT .)
    SEP_RPAR        reduce using rule 13 (primitive -> VAR_INT .)
    SEP_LCBRACKET   reduce using rule 13 (primitive -> VAR_INT .)
    OP_EQUALS       reduce using rule 13 (primitive -> VAR_INT .)
    VAR             reduce using rule 13 (primitive -> VAR_INT .)
    FUNCTION        reduce using rule 13 (primitive -> VAR_INT .)
    LIGHT_TOKEN     reduce using rule 13 (primitive -> VAR_INT .)
    VAR_IDENTIFIER  reduce using rule 13 (primitive -> VAR_INT .)
    IF              reduce using rule 13 (primitive -> VAR_INT .)
    ACTION          reduce using rule 13 (primitive -> VAR_INT .)
    CAMERA          reduce using rule 13 (primitive -> VAR_INT .)
    SEP_HASHTAG     reduce using rule 13 (primitive -> VAR_INT .)
    PRINT           reduce using rule 13 (primitive -> VAR_INT .)
    RETURN          reduce using rule 13 (primitive -> VAR_INT .)
    LOOP            reduce using rule 13 (primitive -> VAR_INT .)
    FOR_EACH        reduce using rule 13 (primitive -> VAR_INT .)
    FOR             reduce using rule 13 (primitive -> VAR_INT .)
    SEP_RCBRACKET   reduce using rule 13 (primitive -> VAR_INT .)


state 27

    (23) figure -> STAR .

    SEP_LCBRACKET   reduce using rule 23 (figure -> STAR .)
    OP_EQUALS       reduce using rule 23 (figure -> STAR .)
    HAS             reduce using rule 23 (figure -> STAR .)
    VAR             reduce using rule 23 (figure -> STAR .)
    FUNCTION        reduce using rule 23 (figure -> STAR .)
    LIGHT_TOKEN     reduce using rule 23 (figure -> STAR .)
    VAR_IDENTIFIER  reduce using rule 23 (figure -> STAR .)
    IF              reduce using rule 23 (figure -> STAR .)
    ACTION          reduce using rule 23 (figure -> STAR .)
    CAMERA          reduce using rule 23 (figure -> STAR .)
    SEP_HASHTAG     reduce using rule 23 (figure -> STAR .)
    PRINT           reduce using rule 23 (figure -> STAR .)
    RETURN          reduce using rule 23 (figure -> STAR .)
    LOOP            reduce using rule 23 (figure -> STAR .)
    FOR_EACH        reduce using rule 23 (figure -> STAR .)
    FOR             reduce using rule 23 (figure -> STAR .)
    SEP_RCBRACKET   reduce using rule 23 (figure -> STAR .)
    SEP_COMMA       reduce using rule 23 (figure -> STAR .)
    SEP_RPAR        reduce using rule 23 (figure -> STAR .)


state 28

    (115) vars -> vars_start v_a .

    VAR             reduce using rule 115 (vars -> vars_start v_a .)
    VAR_IDENTIFIER  reduce using rule 115 (vars -> vars_start v_a .)
    IF              reduce using rule 115 (vars -> vars_start v_a .)
    ACTION          reduce using rule 115 (vars -> vars_start v_a .)
    CAMERA          reduce using rule 115 (vars -> vars_start v_a .)
    SEP_HASHTAG     reduce using rule 115 (vars -> vars_start v_a .)
    PRINT           reduce using rule 115 (vars -> vars_start v_a .)
    RETURN          reduce using rule 115 (vars -> vars_start v_a .)
    LOOP            reduce using rule 115 (vars -> vars_start v_a .)
    FOR_EACH        reduce using rule 115 (vars -> vars_start v_a .)
    FOR             reduce using rule 115 (vars -> vars_start v_a .)
    SEP_RCBRACKET   reduce using rule 115 (vars -> vars_start v_a .)
    FUNCTION        reduce using rule 115 (vars -> vars_start v_a .)
    LIGHT_TOKEN     reduce using rule 115 (vars -> vars_start v_a .)


state 29

    (16) primitive -> VAR_FRACTION .

    SEP_COMMA       reduce using rule 16 (primitive -> VAR_FRACTION .)
    SEP_RPAR        reduce using rule 16 (primitive -> VAR_FRACTION .)
    SEP_LCBRACKET   reduce using rule 16 (primitive -> VAR_FRACTION .)
    OP_EQUALS       reduce using rule 16 (primitive -> VAR_FRACTION .)
    VAR             reduce using rule 16 (primitive -> VAR_FRACTION .)
    FUNCTION        reduce using rule 16 (primitive -> VAR_FRACTION .)
    LIGHT_TOKEN     reduce using rule 16 (primitive -> VAR_FRACTION .)
    VAR_IDENTIFIER  reduce using rule 16 (primitive -> VAR_FRACTION .)
    IF              reduce using rule 16 (primitive -> VAR_FRACTION .)
    ACTION          reduce using rule 16 (primitive -> VAR_FRACTION .)
    CAMERA          reduce using rule 16 (primitive -> VAR_FRACTION .)
    SEP_HASHTAG     reduce using rule 16 (primitive -> VAR_FRACTION .)
    PRINT           reduce using rule 16 (primitive -> VAR_FRACTION .)
    RETURN          reduce using rule 16 (primitive -> VAR_FRACTION .)
    LOOP            reduce using rule 16 (primitive -> VAR_FRACTION .)
    FOR_EACH        reduce using rule 16 (primitive -> VAR_FRACTION .)
    FOR             reduce using rule 16 (primitive -> VAR_FRACTION .)
    SEP_RCBRACKET   reduce using rule 16 (primitive -> VAR_FRACTION .)


state 30

    (18) figure -> LINE .

    SEP_LCBRACKET   reduce using rule 18 (figure -> LINE .)
    OP_EQUALS       reduce using rule 18 (figure -> LINE .)
    HAS             reduce using rule 18 (figure -> LINE .)
    VAR             reduce using rule 18 (figure -> LINE .)
    FUNCTION        reduce using rule 18 (figure -> LINE .)
    LIGHT_TOKEN     reduce using rule 18 (figure -> LINE .)
    VAR_IDENTIFIER  reduce using rule 18 (figure -> LINE .)
    IF              reduce using rule 18 (figure -> LINE .)
    ACTION          reduce using rule 18 (figure -> LINE .)
    CAMERA          reduce using rule 18 (figure -> LINE .)
    SEP_HASHTAG     reduce using rule 18 (figure -> LINE .)
    PRINT           reduce using rule 18 (figure -> LINE .)
    RETURN          reduce using rule 18 (figure -> LINE .)
    LOOP            reduce using rule 18 (figure -> LINE .)
    FOR_EACH        reduce using rule 18 (figure -> LINE .)
    FOR             reduce using rule 18 (figure -> LINE .)
    SEP_RCBRACKET   reduce using rule 18 (figure -> LINE .)
    SEP_COMMA       reduce using rule 18 (figure -> LINE .)
    SEP_RPAR        reduce using rule 18 (figure -> LINE .)


state 31

    (116) v_a -> vars_figs .

    VAR             reduce using rule 116 (v_a -> vars_figs .)
    FUNCTION        reduce using rule 116 (v_a -> vars_figs .)
    LIGHT_TOKEN     reduce using rule 116 (v_a -> vars_figs .)
    VAR_IDENTIFIER  reduce using rule 116 (v_a -> vars_figs .)
    IF              reduce using rule 116 (v_a -> vars_figs .)
    ACTION          reduce using rule 116 (v_a -> vars_figs .)
    CAMERA          reduce using rule 116 (v_a -> vars_figs .)
    SEP_HASHTAG     reduce using rule 116 (v_a -> vars_figs .)
    PRINT           reduce using rule 116 (v_a -> vars_figs .)
    RETURN          reduce using rule 116 (v_a -> vars_figs .)
    LOOP            reduce using rule 116 (v_a -> vars_figs .)
    FOR_EACH        reduce using rule 116 (v_a -> vars_figs .)
    FOR             reduce using rule 116 (v_a -> vars_figs .)
    SEP_RCBRACKET   reduce using rule 116 (v_a -> vars_figs .)


state 32

    (21) figure -> RECTANGLE .

    SEP_LCBRACKET   reduce using rule 21 (figure -> RECTANGLE .)
    OP_EQUALS       reduce using rule 21 (figure -> RECTANGLE .)
    HAS             reduce using rule 21 (figure -> RECTANGLE .)
    VAR             reduce using rule 21 (figure -> RECTANGLE .)
    FUNCTION        reduce using rule 21 (figure -> RECTANGLE .)
    LIGHT_TOKEN     reduce using rule 21 (figure -> RECTANGLE .)
    VAR_IDENTIFIER  reduce using rule 21 (figure -> RECTANGLE .)
    IF              reduce using rule 21 (figure -> RECTANGLE .)
    ACTION          reduce using rule 21 (figure -> RECTANGLE .)
    CAMERA          reduce using rule 21 (figure -> RECTANGLE .)
    SEP_HASHTAG     reduce using rule 21 (figure -> RECTANGLE .)
    PRINT           reduce using rule 21 (figure -> RECTANGLE .)
    RETURN          reduce using rule 21 (figure -> RECTANGLE .)
    LOOP            reduce using rule 21 (figure -> RECTANGLE .)
    FOR_EACH        reduce using rule 21 (figure -> RECTANGLE .)
    FOR             reduce using rule 21 (figure -> RECTANGLE .)
    SEP_RCBRACKET   reduce using rule 21 (figure -> RECTANGLE .)
    SEP_COMMA       reduce using rule 21 (figure -> RECTANGLE .)
    SEP_RPAR        reduce using rule 21 (figure -> RECTANGLE .)


state 33

    (118) vars_start -> VAR vs_a . SEP_COLON

    SEP_COLON       shift and go to state 48


state 34

    (119) vs_a -> VAR_IDENTIFIER . vs_b
    (120) vs_b -> . SEP_COMMA vs_a
    (121) vs_b -> . epsilon
    (152) epsilon -> .

    SEP_COMMA       shift and go to state 51
    SEP_COLON       reduce using rule 152 (epsilon -> .)

    vs_b                           shift and go to state 49
    epsilon                        shift and go to state 50

state 35

    (4) pr_b -> function pr_b .

    LIGHT_TOKEN     reduce using rule 4 (pr_b -> function pr_b .)


state 36

    (25) function -> FUNCTION VAR_IDENTIFIER . SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET

    SEP_LPAR        shift and go to state 52


state 37

    (6) main_func -> LIGHT_TOKEN . SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET

    SEP_LPAR        shift and go to state 53


state 38

    (1) program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func . SEP_RCBRACKET

    SEP_RCBRACKET   shift and go to state 54


state 39

    (127) var_p_a -> epsilon .

    VAR             reduce using rule 127 (var_p_a -> epsilon .)
    FUNCTION        reduce using rule 127 (var_p_a -> epsilon .)
    LIGHT_TOKEN     reduce using rule 127 (var_p_a -> epsilon .)
    VAR_IDENTIFIER  reduce using rule 127 (var_p_a -> epsilon .)
    IF              reduce using rule 127 (var_p_a -> epsilon .)
    ACTION          reduce using rule 127 (var_p_a -> epsilon .)
    CAMERA          reduce using rule 127 (var_p_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 127 (var_p_a -> epsilon .)
    PRINT           reduce using rule 127 (var_p_a -> epsilon .)
    RETURN          reduce using rule 127 (var_p_a -> epsilon .)
    LOOP            reduce using rule 127 (var_p_a -> epsilon .)
    FOR_EACH        reduce using rule 127 (var_p_a -> epsilon .)
    FOR             reduce using rule 127 (var_p_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 127 (var_p_a -> epsilon .)


state 40

    (128) init_prim -> OP_EQUALS . init_a
    (129) init_a -> . VAR_IDENTIFIER
    (130) init_a -> . cnt_prim
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 58
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    init_a                         shift and go to state 59
    cnt_prim                       shift and go to state 60

state 41

    (126) var_p_a -> init_prim .

    VAR             reduce using rule 126 (var_p_a -> init_prim .)
    FUNCTION        reduce using rule 126 (var_p_a -> init_prim .)
    LIGHT_TOKEN     reduce using rule 126 (var_p_a -> init_prim .)
    VAR_IDENTIFIER  reduce using rule 126 (var_p_a -> init_prim .)
    IF              reduce using rule 126 (var_p_a -> init_prim .)
    ACTION          reduce using rule 126 (var_p_a -> init_prim .)
    CAMERA          reduce using rule 126 (var_p_a -> init_prim .)
    SEP_HASHTAG     reduce using rule 126 (var_p_a -> init_prim .)
    PRINT           reduce using rule 126 (var_p_a -> init_prim .)
    RETURN          reduce using rule 126 (var_p_a -> init_prim .)
    LOOP            reduce using rule 126 (var_p_a -> init_prim .)
    FOR_EACH        reduce using rule 126 (var_p_a -> init_prim .)
    FOR             reduce using rule 126 (var_p_a -> init_prim .)
    SEP_RCBRACKET   reduce using rule 126 (var_p_a -> init_prim .)


state 42

    (125) vars_prim -> primitive var_p_a .

    VAR             reduce using rule 125 (vars_prim -> primitive var_p_a .)
    FUNCTION        reduce using rule 125 (vars_prim -> primitive var_p_a .)
    LIGHT_TOKEN     reduce using rule 125 (vars_prim -> primitive var_p_a .)
    VAR_IDENTIFIER  reduce using rule 125 (vars_prim -> primitive var_p_a .)
    IF              reduce using rule 125 (vars_prim -> primitive var_p_a .)
    ACTION          reduce using rule 125 (vars_prim -> primitive var_p_a .)
    CAMERA          reduce using rule 125 (vars_prim -> primitive var_p_a .)
    SEP_HASHTAG     reduce using rule 125 (vars_prim -> primitive var_p_a .)
    PRINT           reduce using rule 125 (vars_prim -> primitive var_p_a .)
    RETURN          reduce using rule 125 (vars_prim -> primitive var_p_a .)
    LOOP            reduce using rule 125 (vars_prim -> primitive var_p_a .)
    FOR_EACH        reduce using rule 125 (vars_prim -> primitive var_p_a .)
    FOR             reduce using rule 125 (vars_prim -> primitive var_p_a .)
    SEP_RCBRACKET   reduce using rule 125 (vars_prim -> primitive var_p_a .)


state 43

    (123) vf_a -> init_fig .

    VAR             reduce using rule 123 (vf_a -> init_fig .)
    FUNCTION        reduce using rule 123 (vf_a -> init_fig .)
    LIGHT_TOKEN     reduce using rule 123 (vf_a -> init_fig .)
    VAR_IDENTIFIER  reduce using rule 123 (vf_a -> init_fig .)
    IF              reduce using rule 123 (vf_a -> init_fig .)
    ACTION          reduce using rule 123 (vf_a -> init_fig .)
    CAMERA          reduce using rule 123 (vf_a -> init_fig .)
    SEP_HASHTAG     reduce using rule 123 (vf_a -> init_fig .)
    PRINT           reduce using rule 123 (vf_a -> init_fig .)
    RETURN          reduce using rule 123 (vf_a -> init_fig .)
    LOOP            reduce using rule 123 (vf_a -> init_fig .)
    FOR_EACH        reduce using rule 123 (vf_a -> init_fig .)
    FOR             reduce using rule 123 (vf_a -> init_fig .)
    SEP_RCBRACKET   reduce using rule 123 (vf_a -> init_fig .)


state 44

    (124) vf_a -> epsilon .

    VAR             reduce using rule 124 (vf_a -> epsilon .)
    FUNCTION        reduce using rule 124 (vf_a -> epsilon .)
    LIGHT_TOKEN     reduce using rule 124 (vf_a -> epsilon .)
    VAR_IDENTIFIER  reduce using rule 124 (vf_a -> epsilon .)
    IF              reduce using rule 124 (vf_a -> epsilon .)
    ACTION          reduce using rule 124 (vf_a -> epsilon .)
    CAMERA          reduce using rule 124 (vf_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 124 (vf_a -> epsilon .)
    PRINT           reduce using rule 124 (vf_a -> epsilon .)
    RETURN          reduce using rule 124 (vf_a -> epsilon .)
    LOOP            reduce using rule 124 (vf_a -> epsilon .)
    FOR_EACH        reduce using rule 124 (vf_a -> epsilon .)
    FOR             reduce using rule 124 (vf_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 124 (vf_a -> epsilon .)


state 45

    (131) init_fig -> OP_EQUALS . VAR_IDENTIFIER

    VAR_IDENTIFIER  shift and go to state 61


state 46

    (132) init_fig -> HAS . fig_create_block
    (133) fig_create_block -> . fig_a END
    (134) fig_a -> . fig_attr fig_b
    (137) fig_attr -> . vector
    (138) fig_attr -> . COLOR SEP_COLON VAR_IDENTIFIER
    (139) fig_attr -> . SIZE SEP_COLON exp
    (140) vector -> . VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR

    COLOR           shift and go to state 64
    SIZE            shift and go to state 68
    VAR_VECTORID    shift and go to state 62

    fig_a                          shift and go to state 66
    fig_create_block               shift and go to state 65
    vector                         shift and go to state 63
    fig_attr                       shift and go to state 67

state 47

    (122) vars_figs -> figure vf_a .

    VAR             reduce using rule 122 (vars_figs -> figure vf_a .)
    FUNCTION        reduce using rule 122 (vars_figs -> figure vf_a .)
    LIGHT_TOKEN     reduce using rule 122 (vars_figs -> figure vf_a .)
    VAR_IDENTIFIER  reduce using rule 122 (vars_figs -> figure vf_a .)
    IF              reduce using rule 122 (vars_figs -> figure vf_a .)
    ACTION          reduce using rule 122 (vars_figs -> figure vf_a .)
    CAMERA          reduce using rule 122 (vars_figs -> figure vf_a .)
    SEP_HASHTAG     reduce using rule 122 (vars_figs -> figure vf_a .)
    PRINT           reduce using rule 122 (vars_figs -> figure vf_a .)
    RETURN          reduce using rule 122 (vars_figs -> figure vf_a .)
    LOOP            reduce using rule 122 (vars_figs -> figure vf_a .)
    FOR_EACH        reduce using rule 122 (vars_figs -> figure vf_a .)
    FOR             reduce using rule 122 (vars_figs -> figure vf_a .)
    SEP_RCBRACKET   reduce using rule 122 (vars_figs -> figure vf_a .)


state 48

    (118) vars_start -> VAR vs_a SEP_COLON .

    POINT           reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    LINE            reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    TRIANGLE        reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    SQUARE          reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    RECTANGLE       reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    POLYGON         reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    STAR            reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    CIRCLE          reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    VAR_BOOLEAN     reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    VAR_INT         reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    VAR_DECIMAL     reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    VAR_STRING      reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)
    VAR_FRACTION    reduce using rule 118 (vars_start -> VAR vs_a SEP_COLON .)


state 49

    (119) vs_a -> VAR_IDENTIFIER vs_b .

    SEP_COLON       reduce using rule 119 (vs_a -> VAR_IDENTIFIER vs_b .)


state 50

    (121) vs_b -> epsilon .

    SEP_COLON       reduce using rule 121 (vs_b -> epsilon .)


state 51

    (120) vs_b -> SEP_COMMA . vs_a
    (119) vs_a -> . VAR_IDENTIFIER vs_b

    VAR_IDENTIFIER  shift and go to state 34

    vs_a                           shift and go to state 69

state 52

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR . func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET
    (26) func_a -> . parameters
    (27) func_a -> . epsilon
    (34) parameters -> . VAR_IDENTIFIER SEP_COLON type param_a
    (152) epsilon -> .

    VAR_IDENTIFIER  shift and go to state 72
    SEP_RPAR        reduce using rule 152 (epsilon -> .)

    parameters                     shift and go to state 70
    epsilon                        shift and go to state 71
    func_a                         shift and go to state 73

state 53

    (6) main_func -> LIGHT_TOKEN SEP_LPAR . SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET

    SEP_RPAR        shift and go to state 74


state 54

    (1) program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET .

    $end            reduce using rule 1 (program -> PROGRAM VAR_IDENTIFIER SEP_LCBRACKET pr_a pr_b main_func SEP_RCBRACKET .)


state 55

    (142) cnt_prim -> VAR_DECIMAL .

    VAR_IDENTIFIER  reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_LPAR        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    VAR_INT         reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    VAR_DECIMAL     reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    VAR_FRACTION    reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_RPAR        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_SEMICOLON   reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    END             reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_PLUS         reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_MINUS        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    IF              reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    ACTION          reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    CAMERA          reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_HASHTAG     reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    PRINT           reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    VAR             reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    RETURN          reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    LOOP            reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    FOR_EACH        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    FOR             reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_RCBRACKET   reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    SEP_COMMA       reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_LESS_THAN    reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_GREATER_THAN reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_NOT_EQUAL    reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_EQUALS       reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_GREATER_EQUAL reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_LESS_EQUAL   reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    FUNCTION        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    LIGHT_TOKEN     reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_TIMES        reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)
    OP_DIVISION     reduce using rule 142 (cnt_prim -> VAR_DECIMAL .)


state 56

    (141) cnt_prim -> VAR_INT .

    VAR_IDENTIFIER  reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_LPAR        reduce using rule 141 (cnt_prim -> VAR_INT .)
    VAR_INT         reduce using rule 141 (cnt_prim -> VAR_INT .)
    VAR_DECIMAL     reduce using rule 141 (cnt_prim -> VAR_INT .)
    VAR_FRACTION    reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_RPAR        reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_SEMICOLON   reduce using rule 141 (cnt_prim -> VAR_INT .)
    END             reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_PLUS         reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_MINUS        reduce using rule 141 (cnt_prim -> VAR_INT .)
    IF              reduce using rule 141 (cnt_prim -> VAR_INT .)
    ACTION          reduce using rule 141 (cnt_prim -> VAR_INT .)
    CAMERA          reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_HASHTAG     reduce using rule 141 (cnt_prim -> VAR_INT .)
    PRINT           reduce using rule 141 (cnt_prim -> VAR_INT .)
    VAR             reduce using rule 141 (cnt_prim -> VAR_INT .)
    RETURN          reduce using rule 141 (cnt_prim -> VAR_INT .)
    LOOP            reduce using rule 141 (cnt_prim -> VAR_INT .)
    FOR_EACH        reduce using rule 141 (cnt_prim -> VAR_INT .)
    FOR             reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_RCBRACKET   reduce using rule 141 (cnt_prim -> VAR_INT .)
    SEP_COMMA       reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_LESS_THAN    reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_GREATER_THAN reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_NOT_EQUAL    reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_EQUALS       reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_GREATER_EQUAL reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_LESS_EQUAL   reduce using rule 141 (cnt_prim -> VAR_INT .)
    FUNCTION        reduce using rule 141 (cnt_prim -> VAR_INT .)
    LIGHT_TOKEN     reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_TIMES        reduce using rule 141 (cnt_prim -> VAR_INT .)
    OP_DIVISION     reduce using rule 141 (cnt_prim -> VAR_INT .)


state 57

    (143) cnt_prim -> VAR_FRACTION .

    VAR_IDENTIFIER  reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_LPAR        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    VAR_INT         reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    VAR_DECIMAL     reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    VAR_FRACTION    reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_RPAR        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_SEMICOLON   reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    END             reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_PLUS         reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_MINUS        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    IF              reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    ACTION          reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    CAMERA          reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_HASHTAG     reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    PRINT           reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    VAR             reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    RETURN          reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    LOOP            reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    FOR_EACH        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    FOR             reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_RCBRACKET   reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    SEP_COMMA       reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_LESS_THAN    reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_GREATER_THAN reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_NOT_EQUAL    reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_EQUALS       reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_GREATER_EQUAL reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_LESS_EQUAL   reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    FUNCTION        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    LIGHT_TOKEN     reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_TIMES        reduce using rule 143 (cnt_prim -> VAR_FRACTION .)
    OP_DIVISION     reduce using rule 143 (cnt_prim -> VAR_FRACTION .)


state 58

    (129) init_a -> VAR_IDENTIFIER .

    VAR             reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    FUNCTION        reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    LIGHT_TOKEN     reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    VAR_IDENTIFIER  reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    IF              reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    ACTION          reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    CAMERA          reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    SEP_HASHTAG     reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    PRINT           reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    RETURN          reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    LOOP            reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    FOR_EACH        reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    FOR             reduce using rule 129 (init_a -> VAR_IDENTIFIER .)
    SEP_RCBRACKET   reduce using rule 129 (init_a -> VAR_IDENTIFIER .)


state 59

    (128) init_prim -> OP_EQUALS init_a .

    VAR             reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    FUNCTION        reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    LIGHT_TOKEN     reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    VAR_IDENTIFIER  reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    IF              reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    ACTION          reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    CAMERA          reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    SEP_HASHTAG     reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    PRINT           reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    RETURN          reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    LOOP            reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    FOR_EACH        reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    FOR             reduce using rule 128 (init_prim -> OP_EQUALS init_a .)
    SEP_RCBRACKET   reduce using rule 128 (init_prim -> OP_EQUALS init_a .)


state 60

    (130) init_a -> cnt_prim .

    VAR             reduce using rule 130 (init_a -> cnt_prim .)
    FUNCTION        reduce using rule 130 (init_a -> cnt_prim .)
    LIGHT_TOKEN     reduce using rule 130 (init_a -> cnt_prim .)
    VAR_IDENTIFIER  reduce using rule 130 (init_a -> cnt_prim .)
    IF              reduce using rule 130 (init_a -> cnt_prim .)
    ACTION          reduce using rule 130 (init_a -> cnt_prim .)
    CAMERA          reduce using rule 130 (init_a -> cnt_prim .)
    SEP_HASHTAG     reduce using rule 130 (init_a -> cnt_prim .)
    PRINT           reduce using rule 130 (init_a -> cnt_prim .)
    RETURN          reduce using rule 130 (init_a -> cnt_prim .)
    LOOP            reduce using rule 130 (init_a -> cnt_prim .)
    FOR_EACH        reduce using rule 130 (init_a -> cnt_prim .)
    FOR             reduce using rule 130 (init_a -> cnt_prim .)
    SEP_RCBRACKET   reduce using rule 130 (init_a -> cnt_prim .)


state 61

    (131) init_fig -> OP_EQUALS VAR_IDENTIFIER .

    VAR             reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    FUNCTION        reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    LIGHT_TOKEN     reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    VAR_IDENTIFIER  reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    IF              reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    ACTION          reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    CAMERA          reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    SEP_HASHTAG     reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    PRINT           reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    RETURN          reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    LOOP            reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    FOR_EACH        reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    FOR             reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)
    SEP_RCBRACKET   reduce using rule 131 (init_fig -> OP_EQUALS VAR_IDENTIFIER .)


state 62

    (140) vector -> VAR_VECTORID . SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR

    SEP_COLON       shift and go to state 75


state 63

    (137) fig_attr -> vector .

    SEP_COMMA       reduce using rule 137 (fig_attr -> vector .)
    END             reduce using rule 137 (fig_attr -> vector .)


state 64

    (138) fig_attr -> COLOR . SEP_COLON VAR_IDENTIFIER

    SEP_COLON       shift and go to state 76


state 65

    (132) init_fig -> HAS fig_create_block .

    VAR             reduce using rule 132 (init_fig -> HAS fig_create_block .)
    FUNCTION        reduce using rule 132 (init_fig -> HAS fig_create_block .)
    LIGHT_TOKEN     reduce using rule 132 (init_fig -> HAS fig_create_block .)
    VAR_IDENTIFIER  reduce using rule 132 (init_fig -> HAS fig_create_block .)
    IF              reduce using rule 132 (init_fig -> HAS fig_create_block .)
    ACTION          reduce using rule 132 (init_fig -> HAS fig_create_block .)
    CAMERA          reduce using rule 132 (init_fig -> HAS fig_create_block .)
    SEP_HASHTAG     reduce using rule 132 (init_fig -> HAS fig_create_block .)
    PRINT           reduce using rule 132 (init_fig -> HAS fig_create_block .)
    RETURN          reduce using rule 132 (init_fig -> HAS fig_create_block .)
    LOOP            reduce using rule 132 (init_fig -> HAS fig_create_block .)
    FOR_EACH        reduce using rule 132 (init_fig -> HAS fig_create_block .)
    FOR             reduce using rule 132 (init_fig -> HAS fig_create_block .)
    SEP_RCBRACKET   reduce using rule 132 (init_fig -> HAS fig_create_block .)


state 66

    (133) fig_create_block -> fig_a . END

    END             shift and go to state 77


state 67

    (134) fig_a -> fig_attr . fig_b
    (135) fig_b -> . SEP_COMMA fig_a
    (136) fig_b -> . epsilon
    (152) epsilon -> .

    SEP_COMMA       shift and go to state 79
    END             reduce using rule 152 (epsilon -> .)

    fig_b                          shift and go to state 78
    epsilon                        shift and go to state 80

state 68

    (139) fig_attr -> SIZE . SEP_COLON exp

    SEP_COLON       shift and go to state 81


state 69

    (120) vs_b -> SEP_COMMA vs_a .

    SEP_COLON       reduce using rule 120 (vs_b -> SEP_COMMA vs_a .)


state 70

    (26) func_a -> parameters .

    SEP_RPAR        reduce using rule 26 (func_a -> parameters .)


state 71

    (27) func_a -> epsilon .

    SEP_RPAR        reduce using rule 27 (func_a -> epsilon .)


state 72

    (34) parameters -> VAR_IDENTIFIER . SEP_COLON type param_a

    SEP_COLON       shift and go to state 82


state 73

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a . SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET

    SEP_RPAR        shift and go to state 83


state 74

    (6) main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR . SEP_LCBRACKET m_a SEP_RCBRACKET

    SEP_LCBRACKET   shift and go to state 84


state 75

    (140) vector -> VAR_VECTORID SEP_COLON . SEP_LPAR exp SEP_COMMA exp SEP_RPAR

    SEP_LPAR        shift and go to state 85


state 76

    (138) fig_attr -> COLOR SEP_COLON . VAR_IDENTIFIER

    VAR_IDENTIFIER  shift and go to state 86


state 77

    (133) fig_create_block -> fig_a END .

    VAR_IDENTIFIER  reduce using rule 133 (fig_create_block -> fig_a END .)
    IF              reduce using rule 133 (fig_create_block -> fig_a END .)
    ACTION          reduce using rule 133 (fig_create_block -> fig_a END .)
    CAMERA          reduce using rule 133 (fig_create_block -> fig_a END .)
    SEP_HASHTAG     reduce using rule 133 (fig_create_block -> fig_a END .)
    PRINT           reduce using rule 133 (fig_create_block -> fig_a END .)
    VAR             reduce using rule 133 (fig_create_block -> fig_a END .)
    RETURN          reduce using rule 133 (fig_create_block -> fig_a END .)
    LOOP            reduce using rule 133 (fig_create_block -> fig_a END .)
    FOR_EACH        reduce using rule 133 (fig_create_block -> fig_a END .)
    FOR             reduce using rule 133 (fig_create_block -> fig_a END .)
    SEP_RCBRACKET   reduce using rule 133 (fig_create_block -> fig_a END .)
    END             reduce using rule 133 (fig_create_block -> fig_a END .)
    FUNCTION        reduce using rule 133 (fig_create_block -> fig_a END .)
    LIGHT_TOKEN     reduce using rule 133 (fig_create_block -> fig_a END .)


state 78

    (134) fig_a -> fig_attr fig_b .

    END             reduce using rule 134 (fig_a -> fig_attr fig_b .)


state 79

    (135) fig_b -> SEP_COMMA . fig_a
    (134) fig_a -> . fig_attr fig_b
    (137) fig_attr -> . vector
    (138) fig_attr -> . COLOR SEP_COLON VAR_IDENTIFIER
    (139) fig_attr -> . SIZE SEP_COLON exp
    (140) vector -> . VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR

    COLOR           shift and go to state 64
    SIZE            shift and go to state 68
    VAR_VECTORID    shift and go to state 62

    fig_attr                       shift and go to state 67
    fig_a                          shift and go to state 87
    vector                         shift and go to state 63

state 80

    (136) fig_b -> epsilon .

    END             reduce using rule 136 (fig_b -> epsilon .)


state 81

    (139) fig_attr -> SIZE SEP_COLON . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 90
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 82

    (34) parameters -> VAR_IDENTIFIER SEP_COLON . type param_a
    (9) type -> . primitive
    (10) type -> . figure
    (11) type -> . epsilon
    (12) primitive -> . VAR_BOOLEAN
    (13) primitive -> . VAR_INT
    (14) primitive -> . VAR_DECIMAL
    (15) primitive -> . VAR_STRING
    (16) primitive -> . VAR_FRACTION
    (17) figure -> . POINT
    (18) figure -> . LINE
    (19) figure -> . TRIANGLE
    (20) figure -> . SQUARE
    (21) figure -> . RECTANGLE
    (22) figure -> . POLYGON
    (23) figure -> . STAR
    (24) figure -> . CIRCLE
    (152) epsilon -> .

    VAR_BOOLEAN     shift and go to state 24
    VAR_INT         shift and go to state 26
    VAR_DECIMAL     shift and go to state 15
    VAR_STRING      shift and go to state 23
    VAR_FRACTION    shift and go to state 29
    POINT           shift and go to state 21
    LINE            shift and go to state 30
    TRIANGLE        shift and go to state 22
    SQUARE          shift and go to state 17
    RECTANGLE       shift and go to state 32
    POLYGON         shift and go to state 19
    STAR            shift and go to state 27
    CIRCLE          shift and go to state 25
    SEP_COMMA       reduce using rule 152 (epsilon -> .)
    SEP_RPAR        reduce using rule 152 (epsilon -> .)

    primitive                      shift and go to state 94
    type                           shift and go to state 96
    figure                         shift and go to state 95
    epsilon                        shift and go to state 97

state 83

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR . func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET
    (28) func_b -> . RETURNS type
    (29) func_b -> . epsilon
    (152) epsilon -> .

    RETURNS         shift and go to state 98
    SEP_LCBRACKET   reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 99
    func_b                         shift and go to state 100

state 84

    (6) main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET . m_a SEP_RCBRACKET
    (7) m_a -> . statement m_a
    (8) m_a -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 111
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 119
    cycle                          shift and go to state 113
    m_a                            shift and go to state 123
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 85

    (140) vector -> VAR_VECTORID SEP_COLON SEP_LPAR . exp SEP_COMMA exp SEP_RPAR
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 127
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 86

    (138) fig_attr -> COLOR SEP_COLON VAR_IDENTIFIER .

    SEP_COMMA       reduce using rule 138 (fig_attr -> COLOR SEP_COLON VAR_IDENTIFIER .)
    END             reduce using rule 138 (fig_attr -> COLOR SEP_COLON VAR_IDENTIFIER .)


state 87

    (135) fig_b -> SEP_COMMA fig_a .

    END             reduce using rule 135 (fig_b -> SEP_COMMA fig_a .)


state 88

    (72) exp -> term . exp_a
    (73) exp_a -> . exp_b
    (74) exp_a -> . epsilon
    (75) exp_b -> . term exp_c exp_d
    (152) epsilon -> .
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

  ! shift/reduce conflict for VAR_IDENTIFIER resolved as shift
    SEP_COMMA       reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)
    SEP_RPAR        reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    SEP_SEMICOLON   reduce using rule 152 (epsilon -> .)
    OP_LESS_THAN    reduce using rule 152 (epsilon -> .)
    OP_GREATER_THAN reduce using rule 152 (epsilon -> .)
    OP_NOT_EQUAL    reduce using rule 152 (epsilon -> .)
    OP_EQUALS       reduce using rule 152 (epsilon -> .)
    OP_GREATER_EQUAL reduce using rule 152 (epsilon -> .)
    OP_LESS_EQUAL   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

  ! VAR_IDENTIFIER  [ reduce using rule 152 (epsilon -> .) ]

    term                           shift and go to state 128
    exp_a                          shift and go to state 129
    exp_b                          shift and go to state 130
    epsilon                        shift and go to state 131
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 89

    (88) factor -> VAR_IDENTIFIER .

    VAR_IDENTIFIER  reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_LPAR        reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    VAR_INT         reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    VAR_DECIMAL     reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    VAR_FRACTION    reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    IF              reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    ACTION          reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    CAMERA          reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_HASHTAG     reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    PRINT           reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    VAR             reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    RETURN          reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    LOOP            reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    FOR_EACH        reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    FOR             reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_RCBRACKET   reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    END             reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_RPAR        reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_SEMICOLON   reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    SEP_COMMA       reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_TIMES        reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_DIVISION     reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_PLUS         reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_MINUS        reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_LESS_THAN    reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_GREATER_THAN reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_NOT_EQUAL    reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_EQUALS       reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_GREATER_EQUAL reduce using rule 88 (factor -> VAR_IDENTIFIER .)
    OP_LESS_EQUAL   reduce using rule 88 (factor -> VAR_IDENTIFIER .)


state 90

    (139) fig_attr -> SIZE SEP_COLON exp .

    SEP_COMMA       reduce using rule 139 (fig_attr -> SIZE SEP_COLON exp .)
    END             reduce using rule 139 (fig_attr -> SIZE SEP_COLON exp .)


state 91

    (80) term -> factor . term_a
    (81) term_a -> . term_b
    (82) term_a -> . epsilon
    (83) term_b -> . factor term_c term_d
    (152) epsilon -> .
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

  ! shift/reduce conflict for VAR_IDENTIFIER resolved as shift
  ! shift/reduce conflict for SEP_LPAR resolved as shift
  ! shift/reduce conflict for VAR_INT resolved as shift
  ! shift/reduce conflict for VAR_DECIMAL resolved as shift
  ! shift/reduce conflict for VAR_FRACTION resolved as shift
    SEP_COMMA       reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)
    OP_PLUS         reduce using rule 152 (epsilon -> .)
    OP_MINUS        reduce using rule 152 (epsilon -> .)
    SEP_RPAR        reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    SEP_SEMICOLON   reduce using rule 152 (epsilon -> .)
    OP_LESS_THAN    reduce using rule 152 (epsilon -> .)
    OP_GREATER_THAN reduce using rule 152 (epsilon -> .)
    OP_NOT_EQUAL    reduce using rule 152 (epsilon -> .)
    OP_EQUALS       reduce using rule 152 (epsilon -> .)
    OP_GREATER_EQUAL reduce using rule 152 (epsilon -> .)
    OP_LESS_EQUAL   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

  ! VAR_IDENTIFIER  [ reduce using rule 152 (epsilon -> .) ]
  ! SEP_LPAR        [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_INT         [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_DECIMAL     [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_FRACTION    [ reduce using rule 152 (epsilon -> .) ]

    term_a                         shift and go to state 132
    term_b                         shift and go to state 133
    epsilon                        shift and go to state 134
    factor                         shift and go to state 135
    cnt_prim                       shift and go to state 92

state 92

    (89) factor -> cnt_prim .

    VAR_IDENTIFIER  reduce using rule 89 (factor -> cnt_prim .)
    SEP_LPAR        reduce using rule 89 (factor -> cnt_prim .)
    VAR_INT         reduce using rule 89 (factor -> cnt_prim .)
    VAR_DECIMAL     reduce using rule 89 (factor -> cnt_prim .)
    VAR_FRACTION    reduce using rule 89 (factor -> cnt_prim .)
    IF              reduce using rule 89 (factor -> cnt_prim .)
    ACTION          reduce using rule 89 (factor -> cnt_prim .)
    CAMERA          reduce using rule 89 (factor -> cnt_prim .)
    SEP_HASHTAG     reduce using rule 89 (factor -> cnt_prim .)
    PRINT           reduce using rule 89 (factor -> cnt_prim .)
    VAR             reduce using rule 89 (factor -> cnt_prim .)
    RETURN          reduce using rule 89 (factor -> cnt_prim .)
    LOOP            reduce using rule 89 (factor -> cnt_prim .)
    FOR_EACH        reduce using rule 89 (factor -> cnt_prim .)
    FOR             reduce using rule 89 (factor -> cnt_prim .)
    SEP_RCBRACKET   reduce using rule 89 (factor -> cnt_prim .)
    END             reduce using rule 89 (factor -> cnt_prim .)
    SEP_RPAR        reduce using rule 89 (factor -> cnt_prim .)
    SEP_SEMICOLON   reduce using rule 89 (factor -> cnt_prim .)
    SEP_COMMA       reduce using rule 89 (factor -> cnt_prim .)
    OP_TIMES        reduce using rule 89 (factor -> cnt_prim .)
    OP_DIVISION     reduce using rule 89 (factor -> cnt_prim .)
    OP_PLUS         reduce using rule 89 (factor -> cnt_prim .)
    OP_MINUS        reduce using rule 89 (factor -> cnt_prim .)
    OP_LESS_THAN    reduce using rule 89 (factor -> cnt_prim .)
    OP_GREATER_THAN reduce using rule 89 (factor -> cnt_prim .)
    OP_NOT_EQUAL    reduce using rule 89 (factor -> cnt_prim .)
    OP_EQUALS       reduce using rule 89 (factor -> cnt_prim .)
    OP_GREATER_EQUAL reduce using rule 89 (factor -> cnt_prim .)
    OP_LESS_EQUAL   reduce using rule 89 (factor -> cnt_prim .)


state 93

    (90) factor -> SEP_LPAR . exp SEP_RPAR
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 136
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 94

    (9) type -> primitive .

    SEP_LCBRACKET   reduce using rule 9 (type -> primitive .)
    SEP_COMMA       reduce using rule 9 (type -> primitive .)
    SEP_RPAR        reduce using rule 9 (type -> primitive .)


state 95

    (10) type -> figure .

    SEP_LCBRACKET   reduce using rule 10 (type -> figure .)
    SEP_COMMA       reduce using rule 10 (type -> figure .)
    SEP_RPAR        reduce using rule 10 (type -> figure .)


state 96

    (34) parameters -> VAR_IDENTIFIER SEP_COLON type . param_a
    (35) param_a -> . SEP_COMMA
    (36) param_a -> . epsilon
    (152) epsilon -> .

    SEP_COMMA       shift and go to state 139
    SEP_RPAR        reduce using rule 152 (epsilon -> .)

    param_a                        shift and go to state 138
    epsilon                        shift and go to state 137

state 97

    (11) type -> epsilon .

    SEP_LCBRACKET   reduce using rule 11 (type -> epsilon .)
    SEP_COMMA       reduce using rule 11 (type -> epsilon .)
    SEP_RPAR        reduce using rule 11 (type -> epsilon .)


state 98

    (28) func_b -> RETURNS . type
    (9) type -> . primitive
    (10) type -> . figure
    (11) type -> . epsilon
    (12) primitive -> . VAR_BOOLEAN
    (13) primitive -> . VAR_INT
    (14) primitive -> . VAR_DECIMAL
    (15) primitive -> . VAR_STRING
    (16) primitive -> . VAR_FRACTION
    (17) figure -> . POINT
    (18) figure -> . LINE
    (19) figure -> . TRIANGLE
    (20) figure -> . SQUARE
    (21) figure -> . RECTANGLE
    (22) figure -> . POLYGON
    (23) figure -> . STAR
    (24) figure -> . CIRCLE
    (152) epsilon -> .

    VAR_BOOLEAN     shift and go to state 24
    VAR_INT         shift and go to state 26
    VAR_DECIMAL     shift and go to state 15
    VAR_STRING      shift and go to state 23
    VAR_FRACTION    shift and go to state 29
    POINT           shift and go to state 21
    LINE            shift and go to state 30
    TRIANGLE        shift and go to state 22
    SQUARE          shift and go to state 17
    RECTANGLE       shift and go to state 32
    POLYGON         shift and go to state 19
    STAR            shift and go to state 27
    CIRCLE          shift and go to state 25
    SEP_LCBRACKET   reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 97
    primitive                      shift and go to state 94
    type                           shift and go to state 140
    figure                         shift and go to state 95

state 99

    (29) func_b -> epsilon .

    SEP_LCBRACKET   reduce using rule 29 (func_b -> epsilon .)


state 100

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b . SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET

    SEP_LCBRACKET   shift and go to state 141


state 101

    (144) return -> RETURN . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 142
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 102

    (63) camera -> CAMERA . VAR_IDENTIFIER

    VAR_IDENTIFIER  shift and go to state 143


state 103

    (145) comments -> SEP_HASHTAG . co_a
    (146) co_a -> . VAR_ANYCHAR co_a
    (147) co_a -> . epsilon
    (152) epsilon -> .

    VAR_ANYCHAR     shift and go to state 145
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 144
    co_a                           shift and go to state 146

state 104

    (148) print -> PRINT . SEP_LPAR prin_a SEP_RPAR

    SEP_LPAR        shift and go to state 147


state 105

    (104) statement -> if .

    VAR_IDENTIFIER  reduce using rule 104 (statement -> if .)
    IF              reduce using rule 104 (statement -> if .)
    ACTION          reduce using rule 104 (statement -> if .)
    CAMERA          reduce using rule 104 (statement -> if .)
    SEP_HASHTAG     reduce using rule 104 (statement -> if .)
    PRINT           reduce using rule 104 (statement -> if .)
    VAR             reduce using rule 104 (statement -> if .)
    RETURN          reduce using rule 104 (statement -> if .)
    LOOP            reduce using rule 104 (statement -> if .)
    FOR_EACH        reduce using rule 104 (statement -> if .)
    FOR             reduce using rule 104 (statement -> if .)
    SEP_RCBRACKET   reduce using rule 104 (statement -> if .)
    END             reduce using rule 104 (statement -> if .)


state 106

    (40) cycle -> for . cyc_a
    (41) cyc_a -> . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    cyc_a                          shift and go to state 150
    do_block                       shift and go to state 149

state 107

    (39) cycle -> for_each . cyc_a
    (41) cyc_a -> . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    do_block                       shift and go to state 149
    cyc_a                          shift and go to state 151

state 108

    (42) loop -> LOOP . SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block

    SEP_LPAR        shift and go to state 152


state 109

    (108) statement -> comments .

    VAR_IDENTIFIER  reduce using rule 108 (statement -> comments .)
    IF              reduce using rule 108 (statement -> comments .)
    ACTION          reduce using rule 108 (statement -> comments .)
    CAMERA          reduce using rule 108 (statement -> comments .)
    SEP_HASHTAG     reduce using rule 108 (statement -> comments .)
    PRINT           reduce using rule 108 (statement -> comments .)
    VAR             reduce using rule 108 (statement -> comments .)
    RETURN          reduce using rule 108 (statement -> comments .)
    LOOP            reduce using rule 108 (statement -> comments .)
    FOR_EACH        reduce using rule 108 (statement -> comments .)
    FOR             reduce using rule 108 (statement -> comments .)
    SEP_RCBRACKET   reduce using rule 108 (statement -> comments .)
    END             reduce using rule 108 (statement -> comments .)


state 110

    (107) statement -> camera .

    VAR_IDENTIFIER  reduce using rule 107 (statement -> camera .)
    IF              reduce using rule 107 (statement -> camera .)
    ACTION          reduce using rule 107 (statement -> camera .)
    CAMERA          reduce using rule 107 (statement -> camera .)
    SEP_HASHTAG     reduce using rule 107 (statement -> camera .)
    PRINT           reduce using rule 107 (statement -> camera .)
    VAR             reduce using rule 107 (statement -> camera .)
    RETURN          reduce using rule 107 (statement -> camera .)
    LOOP            reduce using rule 107 (statement -> camera .)
    FOR_EACH        reduce using rule 107 (statement -> camera .)
    FOR             reduce using rule 107 (statement -> camera .)
    SEP_RCBRACKET   reduce using rule 107 (statement -> camera .)
    END             reduce using rule 107 (statement -> camera .)


state 111

    (7) m_a -> statement . m_a
    (7) m_a -> . statement m_a
    (8) m_a -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 111
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 119
    cycle                          shift and go to state 113
    m_a                            shift and go to state 153
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 112

    (109) statement -> print .

    VAR_IDENTIFIER  reduce using rule 109 (statement -> print .)
    IF              reduce using rule 109 (statement -> print .)
    ACTION          reduce using rule 109 (statement -> print .)
    CAMERA          reduce using rule 109 (statement -> print .)
    SEP_HASHTAG     reduce using rule 109 (statement -> print .)
    PRINT           reduce using rule 109 (statement -> print .)
    VAR             reduce using rule 109 (statement -> print .)
    RETURN          reduce using rule 109 (statement -> print .)
    LOOP            reduce using rule 109 (statement -> print .)
    FOR_EACH        reduce using rule 109 (statement -> print .)
    FOR             reduce using rule 109 (statement -> print .)
    SEP_RCBRACKET   reduce using rule 109 (statement -> print .)
    END             reduce using rule 109 (statement -> print .)


state 113

    (105) statement -> cycle .

    VAR_IDENTIFIER  reduce using rule 105 (statement -> cycle .)
    IF              reduce using rule 105 (statement -> cycle .)
    ACTION          reduce using rule 105 (statement -> cycle .)
    CAMERA          reduce using rule 105 (statement -> cycle .)
    SEP_HASHTAG     reduce using rule 105 (statement -> cycle .)
    PRINT           reduce using rule 105 (statement -> cycle .)
    VAR             reduce using rule 105 (statement -> cycle .)
    RETURN          reduce using rule 105 (statement -> cycle .)
    LOOP            reduce using rule 105 (statement -> cycle .)
    FOR_EACH        reduce using rule 105 (statement -> cycle .)
    FOR             reduce using rule 105 (statement -> cycle .)
    SEP_RCBRACKET   reduce using rule 105 (statement -> cycle .)
    END             reduce using rule 105 (statement -> cycle .)


state 114

    (45) for_each -> FOR_EACH . SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_LPAR        shift and go to state 154


state 115

    (111) statement -> return .

    VAR_IDENTIFIER  reduce using rule 111 (statement -> return .)
    IF              reduce using rule 111 (statement -> return .)
    ACTION          reduce using rule 111 (statement -> return .)
    CAMERA          reduce using rule 111 (statement -> return .)
    SEP_HASHTAG     reduce using rule 111 (statement -> return .)
    PRINT           reduce using rule 111 (statement -> return .)
    VAR             reduce using rule 111 (statement -> return .)
    RETURN          reduce using rule 111 (statement -> return .)
    LOOP            reduce using rule 111 (statement -> return .)
    FOR_EACH        reduce using rule 111 (statement -> return .)
    FOR             reduce using rule 111 (statement -> return .)
    SEP_RCBRACKET   reduce using rule 111 (statement -> return .)
    END             reduce using rule 111 (statement -> return .)


state 116

    (47) for -> FOR . SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_LPAR        shift and go to state 155


state 117

    (103) statement -> assignment .

    VAR_IDENTIFIER  reduce using rule 103 (statement -> assignment .)
    IF              reduce using rule 103 (statement -> assignment .)
    ACTION          reduce using rule 103 (statement -> assignment .)
    CAMERA          reduce using rule 103 (statement -> assignment .)
    SEP_HASHTAG     reduce using rule 103 (statement -> assignment .)
    PRINT           reduce using rule 103 (statement -> assignment .)
    VAR             reduce using rule 103 (statement -> assignment .)
    RETURN          reduce using rule 103 (statement -> assignment .)
    LOOP            reduce using rule 103 (statement -> assignment .)
    FOR_EACH        reduce using rule 103 (statement -> assignment .)
    FOR             reduce using rule 103 (statement -> assignment .)
    SEP_RCBRACKET   reduce using rule 103 (statement -> assignment .)
    END             reduce using rule 103 (statement -> assignment .)


state 118

    (37) assignment -> VAR_IDENTIFIER . OP_EQUALS exp

    OP_EQUALS       shift and go to state 156


state 119

    (8) m_a -> epsilon .

    SEP_RCBRACKET   reduce using rule 8 (m_a -> epsilon .)


state 120

    (52) action -> ACTION . act_a
    (53) act_a -> . act_move
    (54) act_a -> . act_scale
    (55) act_a -> . act_visible
    (56) act_a -> . act_rotate
    (58) act_move -> . MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END
    (59) act_scale -> . SCALE act_header SIZE SEP_COLON exp SEP_COMMA END
    (61) act_visible -> . HIDE act_header END
    (62) act_visible -> . SHOW act_header END
    (60) act_rotate -> . SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END

    MOVE            shift and go to state 158
    SCALE           shift and go to state 161
    HIDE            shift and go to state 163
    SHOW            shift and go to state 165

    act_rotate                     shift and go to state 157
    act_a                          shift and go to state 159
    act_move                       shift and go to state 160
    act_scale                      shift and go to state 162
    act_visible                    shift and go to state 164

state 121

    (151) figure_creations -> VAR . VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block

    VAR_IDENTIFIER  shift and go to state 166


state 122

    (94) if -> IF . condition_block if_a if_b
    (101) condition_block -> . SEP_LPAR condition SEP_RPAR do_block

    SEP_LPAR        shift and go to state 167

    condition_block                shift and go to state 168

state 123

    (6) main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a . SEP_RCBRACKET

    SEP_RCBRACKET   shift and go to state 169


state 124

    (110) statement -> figure_creations .

    VAR_IDENTIFIER  reduce using rule 110 (statement -> figure_creations .)
    IF              reduce using rule 110 (statement -> figure_creations .)
    ACTION          reduce using rule 110 (statement -> figure_creations .)
    CAMERA          reduce using rule 110 (statement -> figure_creations .)
    SEP_HASHTAG     reduce using rule 110 (statement -> figure_creations .)
    PRINT           reduce using rule 110 (statement -> figure_creations .)
    VAR             reduce using rule 110 (statement -> figure_creations .)
    RETURN          reduce using rule 110 (statement -> figure_creations .)
    LOOP            reduce using rule 110 (statement -> figure_creations .)
    FOR_EACH        reduce using rule 110 (statement -> figure_creations .)
    FOR             reduce using rule 110 (statement -> figure_creations .)
    SEP_RCBRACKET   reduce using rule 110 (statement -> figure_creations .)
    END             reduce using rule 110 (statement -> figure_creations .)


state 125

    (38) cycle -> loop . cyc_a
    (41) cyc_a -> . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    cyc_a                          shift and go to state 170
    do_block                       shift and go to state 149

state 126

    (106) statement -> action .

    VAR_IDENTIFIER  reduce using rule 106 (statement -> action .)
    IF              reduce using rule 106 (statement -> action .)
    ACTION          reduce using rule 106 (statement -> action .)
    CAMERA          reduce using rule 106 (statement -> action .)
    SEP_HASHTAG     reduce using rule 106 (statement -> action .)
    PRINT           reduce using rule 106 (statement -> action .)
    VAR             reduce using rule 106 (statement -> action .)
    RETURN          reduce using rule 106 (statement -> action .)
    LOOP            reduce using rule 106 (statement -> action .)
    FOR_EACH        reduce using rule 106 (statement -> action .)
    FOR             reduce using rule 106 (statement -> action .)
    SEP_RCBRACKET   reduce using rule 106 (statement -> action .)
    END             reduce using rule 106 (statement -> action .)


state 127

    (140) vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp . SEP_COMMA exp SEP_RPAR

    SEP_COMMA       shift and go to state 171


state 128

    (75) exp_b -> term . exp_c exp_d
    (76) exp_c -> . OP_PLUS
    (77) exp_c -> . OP_MINUS

    OP_PLUS         shift and go to state 174
    OP_MINUS        shift and go to state 172

    exp_c                          shift and go to state 173

state 129

    (72) exp -> term exp_a .

    SEP_RPAR        reduce using rule 72 (exp -> term exp_a .)
    SEP_SEMICOLON   reduce using rule 72 (exp -> term exp_a .)
    OP_LESS_THAN    reduce using rule 72 (exp -> term exp_a .)
    OP_GREATER_THAN reduce using rule 72 (exp -> term exp_a .)
    OP_NOT_EQUAL    reduce using rule 72 (exp -> term exp_a .)
    OP_EQUALS       reduce using rule 72 (exp -> term exp_a .)
    OP_GREATER_EQUAL reduce using rule 72 (exp -> term exp_a .)
    OP_LESS_EQUAL   reduce using rule 72 (exp -> term exp_a .)
    END             reduce using rule 72 (exp -> term exp_a .)
    VAR_IDENTIFIER  reduce using rule 72 (exp -> term exp_a .)
    IF              reduce using rule 72 (exp -> term exp_a .)
    ACTION          reduce using rule 72 (exp -> term exp_a .)
    CAMERA          reduce using rule 72 (exp -> term exp_a .)
    SEP_HASHTAG     reduce using rule 72 (exp -> term exp_a .)
    PRINT           reduce using rule 72 (exp -> term exp_a .)
    VAR             reduce using rule 72 (exp -> term exp_a .)
    RETURN          reduce using rule 72 (exp -> term exp_a .)
    LOOP            reduce using rule 72 (exp -> term exp_a .)
    FOR_EACH        reduce using rule 72 (exp -> term exp_a .)
    FOR             reduce using rule 72 (exp -> term exp_a .)
    SEP_RCBRACKET   reduce using rule 72 (exp -> term exp_a .)
    SEP_COMMA       reduce using rule 72 (exp -> term exp_a .)


state 130

    (73) exp_a -> exp_b .

    SEP_COMMA       reduce using rule 73 (exp_a -> exp_b .)
    END             reduce using rule 73 (exp_a -> exp_b .)
    SEP_RPAR        reduce using rule 73 (exp_a -> exp_b .)
    VAR_IDENTIFIER  reduce using rule 73 (exp_a -> exp_b .)
    IF              reduce using rule 73 (exp_a -> exp_b .)
    ACTION          reduce using rule 73 (exp_a -> exp_b .)
    CAMERA          reduce using rule 73 (exp_a -> exp_b .)
    SEP_HASHTAG     reduce using rule 73 (exp_a -> exp_b .)
    PRINT           reduce using rule 73 (exp_a -> exp_b .)
    VAR             reduce using rule 73 (exp_a -> exp_b .)
    RETURN          reduce using rule 73 (exp_a -> exp_b .)
    LOOP            reduce using rule 73 (exp_a -> exp_b .)
    FOR_EACH        reduce using rule 73 (exp_a -> exp_b .)
    FOR             reduce using rule 73 (exp_a -> exp_b .)
    SEP_RCBRACKET   reduce using rule 73 (exp_a -> exp_b .)
    SEP_SEMICOLON   reduce using rule 73 (exp_a -> exp_b .)
    OP_LESS_THAN    reduce using rule 73 (exp_a -> exp_b .)
    OP_GREATER_THAN reduce using rule 73 (exp_a -> exp_b .)
    OP_NOT_EQUAL    reduce using rule 73 (exp_a -> exp_b .)
    OP_EQUALS       reduce using rule 73 (exp_a -> exp_b .)
    OP_GREATER_EQUAL reduce using rule 73 (exp_a -> exp_b .)
    OP_LESS_EQUAL   reduce using rule 73 (exp_a -> exp_b .)


state 131

    (74) exp_a -> epsilon .

    SEP_COMMA       reduce using rule 74 (exp_a -> epsilon .)
    END             reduce using rule 74 (exp_a -> epsilon .)
    SEP_RPAR        reduce using rule 74 (exp_a -> epsilon .)
    VAR_IDENTIFIER  reduce using rule 74 (exp_a -> epsilon .)
    IF              reduce using rule 74 (exp_a -> epsilon .)
    ACTION          reduce using rule 74 (exp_a -> epsilon .)
    CAMERA          reduce using rule 74 (exp_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 74 (exp_a -> epsilon .)
    PRINT           reduce using rule 74 (exp_a -> epsilon .)
    VAR             reduce using rule 74 (exp_a -> epsilon .)
    RETURN          reduce using rule 74 (exp_a -> epsilon .)
    LOOP            reduce using rule 74 (exp_a -> epsilon .)
    FOR_EACH        reduce using rule 74 (exp_a -> epsilon .)
    FOR             reduce using rule 74 (exp_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 74 (exp_a -> epsilon .)
    SEP_SEMICOLON   reduce using rule 74 (exp_a -> epsilon .)
    OP_LESS_THAN    reduce using rule 74 (exp_a -> epsilon .)
    OP_GREATER_THAN reduce using rule 74 (exp_a -> epsilon .)
    OP_NOT_EQUAL    reduce using rule 74 (exp_a -> epsilon .)
    OP_EQUALS       reduce using rule 74 (exp_a -> epsilon .)
    OP_GREATER_EQUAL reduce using rule 74 (exp_a -> epsilon .)
    OP_LESS_EQUAL   reduce using rule 74 (exp_a -> epsilon .)


state 132

    (80) term -> factor term_a .

    VAR_IDENTIFIER  reduce using rule 80 (term -> factor term_a .)
    SEP_LPAR        reduce using rule 80 (term -> factor term_a .)
    VAR_INT         reduce using rule 80 (term -> factor term_a .)
    VAR_DECIMAL     reduce using rule 80 (term -> factor term_a .)
    VAR_FRACTION    reduce using rule 80 (term -> factor term_a .)
    SEP_COMMA       reduce using rule 80 (term -> factor term_a .)
    END             reduce using rule 80 (term -> factor term_a .)
    SEP_RPAR        reduce using rule 80 (term -> factor term_a .)
    SEP_SEMICOLON   reduce using rule 80 (term -> factor term_a .)
    OP_PLUS         reduce using rule 80 (term -> factor term_a .)
    OP_MINUS        reduce using rule 80 (term -> factor term_a .)
    IF              reduce using rule 80 (term -> factor term_a .)
    ACTION          reduce using rule 80 (term -> factor term_a .)
    CAMERA          reduce using rule 80 (term -> factor term_a .)
    SEP_HASHTAG     reduce using rule 80 (term -> factor term_a .)
    PRINT           reduce using rule 80 (term -> factor term_a .)
    VAR             reduce using rule 80 (term -> factor term_a .)
    RETURN          reduce using rule 80 (term -> factor term_a .)
    LOOP            reduce using rule 80 (term -> factor term_a .)
    FOR_EACH        reduce using rule 80 (term -> factor term_a .)
    FOR             reduce using rule 80 (term -> factor term_a .)
    SEP_RCBRACKET   reduce using rule 80 (term -> factor term_a .)
    OP_LESS_THAN    reduce using rule 80 (term -> factor term_a .)
    OP_GREATER_THAN reduce using rule 80 (term -> factor term_a .)
    OP_NOT_EQUAL    reduce using rule 80 (term -> factor term_a .)
    OP_EQUALS       reduce using rule 80 (term -> factor term_a .)
    OP_GREATER_EQUAL reduce using rule 80 (term -> factor term_a .)
    OP_LESS_EQUAL   reduce using rule 80 (term -> factor term_a .)


state 133

    (81) term_a -> term_b .

    VAR_IDENTIFIER  reduce using rule 81 (term_a -> term_b .)
    SEP_LPAR        reduce using rule 81 (term_a -> term_b .)
    VAR_INT         reduce using rule 81 (term_a -> term_b .)
    VAR_DECIMAL     reduce using rule 81 (term_a -> term_b .)
    VAR_FRACTION    reduce using rule 81 (term_a -> term_b .)
    SEP_COMMA       reduce using rule 81 (term_a -> term_b .)
    END             reduce using rule 81 (term_a -> term_b .)
    OP_PLUS         reduce using rule 81 (term_a -> term_b .)
    OP_MINUS        reduce using rule 81 (term_a -> term_b .)
    SEP_RPAR        reduce using rule 81 (term_a -> term_b .)
    IF              reduce using rule 81 (term_a -> term_b .)
    ACTION          reduce using rule 81 (term_a -> term_b .)
    CAMERA          reduce using rule 81 (term_a -> term_b .)
    SEP_HASHTAG     reduce using rule 81 (term_a -> term_b .)
    PRINT           reduce using rule 81 (term_a -> term_b .)
    VAR             reduce using rule 81 (term_a -> term_b .)
    RETURN          reduce using rule 81 (term_a -> term_b .)
    LOOP            reduce using rule 81 (term_a -> term_b .)
    FOR_EACH        reduce using rule 81 (term_a -> term_b .)
    FOR             reduce using rule 81 (term_a -> term_b .)
    SEP_RCBRACKET   reduce using rule 81 (term_a -> term_b .)
    SEP_SEMICOLON   reduce using rule 81 (term_a -> term_b .)
    OP_LESS_THAN    reduce using rule 81 (term_a -> term_b .)
    OP_GREATER_THAN reduce using rule 81 (term_a -> term_b .)
    OP_NOT_EQUAL    reduce using rule 81 (term_a -> term_b .)
    OP_EQUALS       reduce using rule 81 (term_a -> term_b .)
    OP_GREATER_EQUAL reduce using rule 81 (term_a -> term_b .)
    OP_LESS_EQUAL   reduce using rule 81 (term_a -> term_b .)


state 134

    (82) term_a -> epsilon .

    VAR_IDENTIFIER  reduce using rule 82 (term_a -> epsilon .)
    SEP_LPAR        reduce using rule 82 (term_a -> epsilon .)
    VAR_INT         reduce using rule 82 (term_a -> epsilon .)
    VAR_DECIMAL     reduce using rule 82 (term_a -> epsilon .)
    VAR_FRACTION    reduce using rule 82 (term_a -> epsilon .)
    SEP_COMMA       reduce using rule 82 (term_a -> epsilon .)
    END             reduce using rule 82 (term_a -> epsilon .)
    OP_PLUS         reduce using rule 82 (term_a -> epsilon .)
    OP_MINUS        reduce using rule 82 (term_a -> epsilon .)
    SEP_RPAR        reduce using rule 82 (term_a -> epsilon .)
    IF              reduce using rule 82 (term_a -> epsilon .)
    ACTION          reduce using rule 82 (term_a -> epsilon .)
    CAMERA          reduce using rule 82 (term_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 82 (term_a -> epsilon .)
    PRINT           reduce using rule 82 (term_a -> epsilon .)
    VAR             reduce using rule 82 (term_a -> epsilon .)
    RETURN          reduce using rule 82 (term_a -> epsilon .)
    LOOP            reduce using rule 82 (term_a -> epsilon .)
    FOR_EACH        reduce using rule 82 (term_a -> epsilon .)
    FOR             reduce using rule 82 (term_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 82 (term_a -> epsilon .)
    SEP_SEMICOLON   reduce using rule 82 (term_a -> epsilon .)
    OP_LESS_THAN    reduce using rule 82 (term_a -> epsilon .)
    OP_GREATER_THAN reduce using rule 82 (term_a -> epsilon .)
    OP_NOT_EQUAL    reduce using rule 82 (term_a -> epsilon .)
    OP_EQUALS       reduce using rule 82 (term_a -> epsilon .)
    OP_GREATER_EQUAL reduce using rule 82 (term_a -> epsilon .)
    OP_LESS_EQUAL   reduce using rule 82 (term_a -> epsilon .)


state 135

    (83) term_b -> factor . term_c term_d
    (84) term_c -> . OP_TIMES
    (85) term_c -> . OP_DIVISION

    OP_TIMES        shift and go to state 177
    OP_DIVISION     shift and go to state 175

    term_c                         shift and go to state 176

state 136

    (90) factor -> SEP_LPAR exp . SEP_RPAR

    SEP_RPAR        shift and go to state 178


state 137

    (36) param_a -> epsilon .

    SEP_RPAR        reduce using rule 36 (param_a -> epsilon .)


state 138

    (34) parameters -> VAR_IDENTIFIER SEP_COLON type param_a .

    SEP_RPAR        reduce using rule 34 (parameters -> VAR_IDENTIFIER SEP_COLON type param_a .)


state 139

    (35) param_a -> SEP_COMMA .

    SEP_RPAR        reduce using rule 35 (param_a -> SEP_COMMA .)


state 140

    (28) func_b -> RETURNS type .

    SEP_LCBRACKET   reduce using rule 28 (func_b -> RETURNS type .)


state 141

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET . func_c stmt_loop SEP_RCBRACKET
    (30) func_c -> . vars func_c
    (31) func_c -> . epsilon
    (115) vars -> . vars_start v_a
    (152) epsilon -> .
    (118) vars_start -> . VAR vs_a SEP_COLON

  ! shift/reduce conflict for VAR resolved as shift
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR             shift and go to state 9

  ! VAR             [ reduce using rule 152 (epsilon -> .) ]

    vars                           shift and go to state 179
    epsilon                        shift and go to state 180
    vars_start                     shift and go to state 8
    func_c                         shift and go to state 181

state 142

    (144) return -> RETURN exp .

    VAR_IDENTIFIER  reduce using rule 144 (return -> RETURN exp .)
    IF              reduce using rule 144 (return -> RETURN exp .)
    ACTION          reduce using rule 144 (return -> RETURN exp .)
    CAMERA          reduce using rule 144 (return -> RETURN exp .)
    SEP_HASHTAG     reduce using rule 144 (return -> RETURN exp .)
    PRINT           reduce using rule 144 (return -> RETURN exp .)
    VAR             reduce using rule 144 (return -> RETURN exp .)
    RETURN          reduce using rule 144 (return -> RETURN exp .)
    LOOP            reduce using rule 144 (return -> RETURN exp .)
    FOR_EACH        reduce using rule 144 (return -> RETURN exp .)
    FOR             reduce using rule 144 (return -> RETURN exp .)
    END             reduce using rule 144 (return -> RETURN exp .)
    SEP_RCBRACKET   reduce using rule 144 (return -> RETURN exp .)


state 143

    (63) camera -> CAMERA VAR_IDENTIFIER .

    VAR_IDENTIFIER  reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    IF              reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    ACTION          reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    CAMERA          reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    SEP_HASHTAG     reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    PRINT           reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    VAR             reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    RETURN          reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    LOOP            reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    FOR_EACH        reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    FOR             reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    SEP_RCBRACKET   reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)
    END             reduce using rule 63 (camera -> CAMERA VAR_IDENTIFIER .)


state 144

    (147) co_a -> epsilon .

    VAR_IDENTIFIER  reduce using rule 147 (co_a -> epsilon .)
    IF              reduce using rule 147 (co_a -> epsilon .)
    ACTION          reduce using rule 147 (co_a -> epsilon .)
    CAMERA          reduce using rule 147 (co_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 147 (co_a -> epsilon .)
    PRINT           reduce using rule 147 (co_a -> epsilon .)
    VAR             reduce using rule 147 (co_a -> epsilon .)
    RETURN          reduce using rule 147 (co_a -> epsilon .)
    LOOP            reduce using rule 147 (co_a -> epsilon .)
    FOR_EACH        reduce using rule 147 (co_a -> epsilon .)
    FOR             reduce using rule 147 (co_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 147 (co_a -> epsilon .)
    END             reduce using rule 147 (co_a -> epsilon .)


state 145

    (146) co_a -> VAR_ANYCHAR . co_a
    (146) co_a -> . VAR_ANYCHAR co_a
    (147) co_a -> . epsilon
    (152) epsilon -> .

    VAR_ANYCHAR     shift and go to state 145
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 144
    co_a                           shift and go to state 182

state 146

    (145) comments -> SEP_HASHTAG co_a .

    VAR_IDENTIFIER  reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    IF              reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    ACTION          reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    CAMERA          reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    SEP_HASHTAG     reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    PRINT           reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    VAR             reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    RETURN          reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    LOOP            reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    FOR_EACH        reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    FOR             reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    END             reduce using rule 145 (comments -> SEP_HASHTAG co_a .)
    SEP_RCBRACKET   reduce using rule 145 (comments -> SEP_HASHTAG co_a .)


state 147

    (148) print -> PRINT SEP_LPAR . prin_a SEP_RPAR
    (149) prin_a -> . exp
    (150) prin_a -> . VAR_STRING
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_STRING      shift and go to state 184
    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    prin_a                         shift and go to state 183
    exp                            shift and go to state 185
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 148

    (102) do_block -> DO . stmt_loop END
    (32) stmt_loop -> . statement stmt_loop
    (33) stmt_loop -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    END             reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    stmt_loop                      shift and go to state 186
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 187
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 188
    cycle                          shift and go to state 113
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 149

    (41) cyc_a -> do_block .

    VAR_IDENTIFIER  reduce using rule 41 (cyc_a -> do_block .)
    IF              reduce using rule 41 (cyc_a -> do_block .)
    ACTION          reduce using rule 41 (cyc_a -> do_block .)
    CAMERA          reduce using rule 41 (cyc_a -> do_block .)
    SEP_HASHTAG     reduce using rule 41 (cyc_a -> do_block .)
    PRINT           reduce using rule 41 (cyc_a -> do_block .)
    VAR             reduce using rule 41 (cyc_a -> do_block .)
    RETURN          reduce using rule 41 (cyc_a -> do_block .)
    LOOP            reduce using rule 41 (cyc_a -> do_block .)
    FOR_EACH        reduce using rule 41 (cyc_a -> do_block .)
    FOR             reduce using rule 41 (cyc_a -> do_block .)
    SEP_RCBRACKET   reduce using rule 41 (cyc_a -> do_block .)
    END             reduce using rule 41 (cyc_a -> do_block .)


state 150

    (40) cycle -> for cyc_a .

    VAR_IDENTIFIER  reduce using rule 40 (cycle -> for cyc_a .)
    IF              reduce using rule 40 (cycle -> for cyc_a .)
    ACTION          reduce using rule 40 (cycle -> for cyc_a .)
    CAMERA          reduce using rule 40 (cycle -> for cyc_a .)
    SEP_HASHTAG     reduce using rule 40 (cycle -> for cyc_a .)
    PRINT           reduce using rule 40 (cycle -> for cyc_a .)
    VAR             reduce using rule 40 (cycle -> for cyc_a .)
    RETURN          reduce using rule 40 (cycle -> for cyc_a .)
    LOOP            reduce using rule 40 (cycle -> for cyc_a .)
    FOR_EACH        reduce using rule 40 (cycle -> for cyc_a .)
    FOR             reduce using rule 40 (cycle -> for cyc_a .)
    SEP_RCBRACKET   reduce using rule 40 (cycle -> for cyc_a .)
    END             reduce using rule 40 (cycle -> for cyc_a .)


state 151

    (39) cycle -> for_each cyc_a .

    VAR_IDENTIFIER  reduce using rule 39 (cycle -> for_each cyc_a .)
    IF              reduce using rule 39 (cycle -> for_each cyc_a .)
    ACTION          reduce using rule 39 (cycle -> for_each cyc_a .)
    CAMERA          reduce using rule 39 (cycle -> for_each cyc_a .)
    SEP_HASHTAG     reduce using rule 39 (cycle -> for_each cyc_a .)
    PRINT           reduce using rule 39 (cycle -> for_each cyc_a .)
    VAR             reduce using rule 39 (cycle -> for_each cyc_a .)
    RETURN          reduce using rule 39 (cycle -> for_each cyc_a .)
    LOOP            reduce using rule 39 (cycle -> for_each cyc_a .)
    FOR_EACH        reduce using rule 39 (cycle -> for_each cyc_a .)
    FOR             reduce using rule 39 (cycle -> for_each cyc_a .)
    SEP_RCBRACKET   reduce using rule 39 (cycle -> for_each cyc_a .)
    END             reduce using rule 39 (cycle -> for_each cyc_a .)


state 152

    (42) loop -> LOOP SEP_LPAR . l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (43) l_a -> . VAR_INT
    (44) l_a -> . VAR_IDENTIFIER

    VAR_INT         shift and go to state 189
    VAR_IDENTIFIER  shift and go to state 190

    l_a                            shift and go to state 191

state 153

    (7) m_a -> statement m_a .

    SEP_RCBRACKET   reduce using rule 7 (m_a -> statement m_a .)


state 154

    (45) for_each -> FOR_EACH SEP_LPAR . VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    VAR_IDENTIFIER  shift and go to state 192


state 155

    (47) for -> FOR SEP_LPAR . for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (48) for_a -> . assignment
    (49) for_a -> . epsilon
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (152) epsilon -> .

    VAR_IDENTIFIER  shift and go to state 118
    SEP_SEMICOLON   reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 194
    for_a                          shift and go to state 195
    assignment                     shift and go to state 193

state 156

    (37) assignment -> VAR_IDENTIFIER OP_EQUALS . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 196
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 157

    (56) act_a -> act_rotate .

    VAR_IDENTIFIER  reduce using rule 56 (act_a -> act_rotate .)
    IF              reduce using rule 56 (act_a -> act_rotate .)
    ACTION          reduce using rule 56 (act_a -> act_rotate .)
    CAMERA          reduce using rule 56 (act_a -> act_rotate .)
    SEP_HASHTAG     reduce using rule 56 (act_a -> act_rotate .)
    PRINT           reduce using rule 56 (act_a -> act_rotate .)
    VAR             reduce using rule 56 (act_a -> act_rotate .)
    RETURN          reduce using rule 56 (act_a -> act_rotate .)
    LOOP            reduce using rule 56 (act_a -> act_rotate .)
    FOR_EACH        reduce using rule 56 (act_a -> act_rotate .)
    FOR             reduce using rule 56 (act_a -> act_rotate .)
    SEP_RCBRACKET   reduce using rule 56 (act_a -> act_rotate .)
    END             reduce using rule 56 (act_a -> act_rotate .)


state 158

    (58) act_move -> MOVE . act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END
    (57) act_header -> . VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    VAR_IDENTIFIER  shift and go to state 197

    act_header                     shift and go to state 198

state 159

    (52) action -> ACTION act_a .

    VAR_IDENTIFIER  reduce using rule 52 (action -> ACTION act_a .)
    IF              reduce using rule 52 (action -> ACTION act_a .)
    ACTION          reduce using rule 52 (action -> ACTION act_a .)
    CAMERA          reduce using rule 52 (action -> ACTION act_a .)
    SEP_HASHTAG     reduce using rule 52 (action -> ACTION act_a .)
    PRINT           reduce using rule 52 (action -> ACTION act_a .)
    VAR             reduce using rule 52 (action -> ACTION act_a .)
    RETURN          reduce using rule 52 (action -> ACTION act_a .)
    LOOP            reduce using rule 52 (action -> ACTION act_a .)
    FOR_EACH        reduce using rule 52 (action -> ACTION act_a .)
    FOR             reduce using rule 52 (action -> ACTION act_a .)
    SEP_RCBRACKET   reduce using rule 52 (action -> ACTION act_a .)
    END             reduce using rule 52 (action -> ACTION act_a .)


state 160

    (53) act_a -> act_move .

    VAR_IDENTIFIER  reduce using rule 53 (act_a -> act_move .)
    IF              reduce using rule 53 (act_a -> act_move .)
    ACTION          reduce using rule 53 (act_a -> act_move .)
    CAMERA          reduce using rule 53 (act_a -> act_move .)
    SEP_HASHTAG     reduce using rule 53 (act_a -> act_move .)
    PRINT           reduce using rule 53 (act_a -> act_move .)
    VAR             reduce using rule 53 (act_a -> act_move .)
    RETURN          reduce using rule 53 (act_a -> act_move .)
    LOOP            reduce using rule 53 (act_a -> act_move .)
    FOR_EACH        reduce using rule 53 (act_a -> act_move .)
    FOR             reduce using rule 53 (act_a -> act_move .)
    SEP_RCBRACKET   reduce using rule 53 (act_a -> act_move .)
    END             reduce using rule 53 (act_a -> act_move .)


state 161

    (59) act_scale -> SCALE . act_header SIZE SEP_COLON exp SEP_COMMA END
    (60) act_rotate -> SCALE . act_header ANGLE SEP_COLON exp SEP_COMMA END
    (57) act_header -> . VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    VAR_IDENTIFIER  shift and go to state 197

    act_header                     shift and go to state 199

state 162

    (54) act_a -> act_scale .

    VAR_IDENTIFIER  reduce using rule 54 (act_a -> act_scale .)
    IF              reduce using rule 54 (act_a -> act_scale .)
    ACTION          reduce using rule 54 (act_a -> act_scale .)
    CAMERA          reduce using rule 54 (act_a -> act_scale .)
    SEP_HASHTAG     reduce using rule 54 (act_a -> act_scale .)
    PRINT           reduce using rule 54 (act_a -> act_scale .)
    VAR             reduce using rule 54 (act_a -> act_scale .)
    RETURN          reduce using rule 54 (act_a -> act_scale .)
    LOOP            reduce using rule 54 (act_a -> act_scale .)
    FOR_EACH        reduce using rule 54 (act_a -> act_scale .)
    FOR             reduce using rule 54 (act_a -> act_scale .)
    SEP_RCBRACKET   reduce using rule 54 (act_a -> act_scale .)
    END             reduce using rule 54 (act_a -> act_scale .)


state 163

    (61) act_visible -> HIDE . act_header END
    (57) act_header -> . VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    VAR_IDENTIFIER  shift and go to state 197

    act_header                     shift and go to state 200

state 164

    (55) act_a -> act_visible .

    VAR_IDENTIFIER  reduce using rule 55 (act_a -> act_visible .)
    IF              reduce using rule 55 (act_a -> act_visible .)
    ACTION          reduce using rule 55 (act_a -> act_visible .)
    CAMERA          reduce using rule 55 (act_a -> act_visible .)
    SEP_HASHTAG     reduce using rule 55 (act_a -> act_visible .)
    PRINT           reduce using rule 55 (act_a -> act_visible .)
    VAR             reduce using rule 55 (act_a -> act_visible .)
    RETURN          reduce using rule 55 (act_a -> act_visible .)
    LOOP            reduce using rule 55 (act_a -> act_visible .)
    FOR_EACH        reduce using rule 55 (act_a -> act_visible .)
    FOR             reduce using rule 55 (act_a -> act_visible .)
    SEP_RCBRACKET   reduce using rule 55 (act_a -> act_visible .)
    END             reduce using rule 55 (act_a -> act_visible .)


state 165

    (62) act_visible -> SHOW . act_header END
    (57) act_header -> . VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    VAR_IDENTIFIER  shift and go to state 197

    act_header                     shift and go to state 201

state 166

    (151) figure_creations -> VAR VAR_IDENTIFIER . SEP_COLON figure HAS fig_create_block

    SEP_COLON       shift and go to state 202


state 167

    (101) condition_block -> SEP_LPAR . condition SEP_RPAR do_block
    (64) condition -> . exp ex_a
    (65) condition -> . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 203
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92
    condition                      shift and go to state 204

state 168

    (94) if -> IF condition_block . if_a if_b
    (95) if_a -> . elsif
    (96) if_a -> . epsilon
    (99) elsif -> . ELSIF condition_block
    (152) epsilon -> .

    ELSIF           shift and go to state 206
    ELSE            reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 205
    elsif                          shift and go to state 207
    if_a                           shift and go to state 208

state 169

    (6) main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET .

    SEP_RCBRACKET   reduce using rule 6 (main_func -> LIGHT_TOKEN SEP_LPAR SEP_RPAR SEP_LCBRACKET m_a SEP_RCBRACKET .)


state 170

    (38) cycle -> loop cyc_a .

    VAR_IDENTIFIER  reduce using rule 38 (cycle -> loop cyc_a .)
    IF              reduce using rule 38 (cycle -> loop cyc_a .)
    ACTION          reduce using rule 38 (cycle -> loop cyc_a .)
    CAMERA          reduce using rule 38 (cycle -> loop cyc_a .)
    SEP_HASHTAG     reduce using rule 38 (cycle -> loop cyc_a .)
    PRINT           reduce using rule 38 (cycle -> loop cyc_a .)
    VAR             reduce using rule 38 (cycle -> loop cyc_a .)
    RETURN          reduce using rule 38 (cycle -> loop cyc_a .)
    LOOP            reduce using rule 38 (cycle -> loop cyc_a .)
    FOR_EACH        reduce using rule 38 (cycle -> loop cyc_a .)
    FOR             reduce using rule 38 (cycle -> loop cyc_a .)
    SEP_RCBRACKET   reduce using rule 38 (cycle -> loop cyc_a .)
    END             reduce using rule 38 (cycle -> loop cyc_a .)


state 171

    (140) vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA . exp SEP_RPAR
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 209
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 172

    (77) exp_c -> OP_MINUS .

    VAR_IDENTIFIER  reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_LPAR        reduce using rule 77 (exp_c -> OP_MINUS .)
    VAR_INT         reduce using rule 77 (exp_c -> OP_MINUS .)
    VAR_DECIMAL     reduce using rule 77 (exp_c -> OP_MINUS .)
    VAR_FRACTION    reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_COMMA       reduce using rule 77 (exp_c -> OP_MINUS .)
    END             reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_RPAR        reduce using rule 77 (exp_c -> OP_MINUS .)
    IF              reduce using rule 77 (exp_c -> OP_MINUS .)
    ACTION          reduce using rule 77 (exp_c -> OP_MINUS .)
    CAMERA          reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_HASHTAG     reduce using rule 77 (exp_c -> OP_MINUS .)
    PRINT           reduce using rule 77 (exp_c -> OP_MINUS .)
    VAR             reduce using rule 77 (exp_c -> OP_MINUS .)
    RETURN          reduce using rule 77 (exp_c -> OP_MINUS .)
    LOOP            reduce using rule 77 (exp_c -> OP_MINUS .)
    FOR_EACH        reduce using rule 77 (exp_c -> OP_MINUS .)
    FOR             reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_RCBRACKET   reduce using rule 77 (exp_c -> OP_MINUS .)
    SEP_SEMICOLON   reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_LESS_THAN    reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_GREATER_THAN reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_NOT_EQUAL    reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_EQUALS       reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_GREATER_EQUAL reduce using rule 77 (exp_c -> OP_MINUS .)
    OP_LESS_EQUAL   reduce using rule 77 (exp_c -> OP_MINUS .)


state 173

    (75) exp_b -> term exp_c . exp_d
    (78) exp_d -> . exp_b
    (79) exp_d -> . epsilon
    (75) exp_b -> . term exp_c exp_d
    (152) epsilon -> .
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

  ! shift/reduce conflict for VAR_IDENTIFIER resolved as shift
    SEP_COMMA       reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)
    SEP_RPAR        reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    SEP_SEMICOLON   reduce using rule 152 (epsilon -> .)
    OP_LESS_THAN    reduce using rule 152 (epsilon -> .)
    OP_GREATER_THAN reduce using rule 152 (epsilon -> .)
    OP_NOT_EQUAL    reduce using rule 152 (epsilon -> .)
    OP_EQUALS       reduce using rule 152 (epsilon -> .)
    OP_GREATER_EQUAL reduce using rule 152 (epsilon -> .)
    OP_LESS_EQUAL   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

  ! VAR_IDENTIFIER  [ reduce using rule 152 (epsilon -> .) ]

    exp_d                          shift and go to state 210
    term                           shift and go to state 128
    exp_b                          shift and go to state 211
    epsilon                        shift and go to state 212
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 174

    (76) exp_c -> OP_PLUS .

    VAR_IDENTIFIER  reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_LPAR        reduce using rule 76 (exp_c -> OP_PLUS .)
    VAR_INT         reduce using rule 76 (exp_c -> OP_PLUS .)
    VAR_DECIMAL     reduce using rule 76 (exp_c -> OP_PLUS .)
    VAR_FRACTION    reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_COMMA       reduce using rule 76 (exp_c -> OP_PLUS .)
    END             reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_RPAR        reduce using rule 76 (exp_c -> OP_PLUS .)
    IF              reduce using rule 76 (exp_c -> OP_PLUS .)
    ACTION          reduce using rule 76 (exp_c -> OP_PLUS .)
    CAMERA          reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_HASHTAG     reduce using rule 76 (exp_c -> OP_PLUS .)
    PRINT           reduce using rule 76 (exp_c -> OP_PLUS .)
    VAR             reduce using rule 76 (exp_c -> OP_PLUS .)
    RETURN          reduce using rule 76 (exp_c -> OP_PLUS .)
    LOOP            reduce using rule 76 (exp_c -> OP_PLUS .)
    FOR_EACH        reduce using rule 76 (exp_c -> OP_PLUS .)
    FOR             reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_RCBRACKET   reduce using rule 76 (exp_c -> OP_PLUS .)
    SEP_SEMICOLON   reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_LESS_THAN    reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_GREATER_THAN reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_NOT_EQUAL    reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_EQUALS       reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_GREATER_EQUAL reduce using rule 76 (exp_c -> OP_PLUS .)
    OP_LESS_EQUAL   reduce using rule 76 (exp_c -> OP_PLUS .)


state 175

    (85) term_c -> OP_DIVISION .

    VAR_IDENTIFIER  reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_LPAR        reduce using rule 85 (term_c -> OP_DIVISION .)
    VAR_INT         reduce using rule 85 (term_c -> OP_DIVISION .)
    VAR_DECIMAL     reduce using rule 85 (term_c -> OP_DIVISION .)
    VAR_FRACTION    reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_COMMA       reduce using rule 85 (term_c -> OP_DIVISION .)
    END             reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_PLUS         reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_MINUS        reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_RPAR        reduce using rule 85 (term_c -> OP_DIVISION .)
    IF              reduce using rule 85 (term_c -> OP_DIVISION .)
    ACTION          reduce using rule 85 (term_c -> OP_DIVISION .)
    CAMERA          reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_HASHTAG     reduce using rule 85 (term_c -> OP_DIVISION .)
    PRINT           reduce using rule 85 (term_c -> OP_DIVISION .)
    VAR             reduce using rule 85 (term_c -> OP_DIVISION .)
    RETURN          reduce using rule 85 (term_c -> OP_DIVISION .)
    LOOP            reduce using rule 85 (term_c -> OP_DIVISION .)
    FOR_EACH        reduce using rule 85 (term_c -> OP_DIVISION .)
    FOR             reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_RCBRACKET   reduce using rule 85 (term_c -> OP_DIVISION .)
    SEP_SEMICOLON   reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_LESS_THAN    reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_GREATER_THAN reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_NOT_EQUAL    reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_EQUALS       reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_GREATER_EQUAL reduce using rule 85 (term_c -> OP_DIVISION .)
    OP_LESS_EQUAL   reduce using rule 85 (term_c -> OP_DIVISION .)


state 176

    (83) term_b -> factor term_c . term_d
    (86) term_d -> . term_b
    (87) term_d -> . epsilon
    (83) term_b -> . factor term_c term_d
    (152) epsilon -> .
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

  ! shift/reduce conflict for VAR_IDENTIFIER resolved as shift
  ! shift/reduce conflict for SEP_LPAR resolved as shift
  ! shift/reduce conflict for VAR_INT resolved as shift
  ! shift/reduce conflict for VAR_DECIMAL resolved as shift
  ! shift/reduce conflict for VAR_FRACTION resolved as shift
    SEP_COMMA       reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)
    OP_PLUS         reduce using rule 152 (epsilon -> .)
    OP_MINUS        reduce using rule 152 (epsilon -> .)
    SEP_RPAR        reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    SEP_SEMICOLON   reduce using rule 152 (epsilon -> .)
    OP_LESS_THAN    reduce using rule 152 (epsilon -> .)
    OP_GREATER_THAN reduce using rule 152 (epsilon -> .)
    OP_NOT_EQUAL    reduce using rule 152 (epsilon -> .)
    OP_EQUALS       reduce using rule 152 (epsilon -> .)
    OP_GREATER_EQUAL reduce using rule 152 (epsilon -> .)
    OP_LESS_EQUAL   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

  ! VAR_IDENTIFIER  [ reduce using rule 152 (epsilon -> .) ]
  ! SEP_LPAR        [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_INT         [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_DECIMAL     [ reduce using rule 152 (epsilon -> .) ]
  ! VAR_FRACTION    [ reduce using rule 152 (epsilon -> .) ]

    term_b                         shift and go to state 213
    term_d                         shift and go to state 214
    epsilon                        shift and go to state 215
    factor                         shift and go to state 135
    cnt_prim                       shift and go to state 92

state 177

    (84) term_c -> OP_TIMES .

    VAR_IDENTIFIER  reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_LPAR        reduce using rule 84 (term_c -> OP_TIMES .)
    VAR_INT         reduce using rule 84 (term_c -> OP_TIMES .)
    VAR_DECIMAL     reduce using rule 84 (term_c -> OP_TIMES .)
    VAR_FRACTION    reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_COMMA       reduce using rule 84 (term_c -> OP_TIMES .)
    END             reduce using rule 84 (term_c -> OP_TIMES .)
    OP_PLUS         reduce using rule 84 (term_c -> OP_TIMES .)
    OP_MINUS        reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_RPAR        reduce using rule 84 (term_c -> OP_TIMES .)
    IF              reduce using rule 84 (term_c -> OP_TIMES .)
    ACTION          reduce using rule 84 (term_c -> OP_TIMES .)
    CAMERA          reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_HASHTAG     reduce using rule 84 (term_c -> OP_TIMES .)
    PRINT           reduce using rule 84 (term_c -> OP_TIMES .)
    VAR             reduce using rule 84 (term_c -> OP_TIMES .)
    RETURN          reduce using rule 84 (term_c -> OP_TIMES .)
    LOOP            reduce using rule 84 (term_c -> OP_TIMES .)
    FOR_EACH        reduce using rule 84 (term_c -> OP_TIMES .)
    FOR             reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_RCBRACKET   reduce using rule 84 (term_c -> OP_TIMES .)
    SEP_SEMICOLON   reduce using rule 84 (term_c -> OP_TIMES .)
    OP_LESS_THAN    reduce using rule 84 (term_c -> OP_TIMES .)
    OP_GREATER_THAN reduce using rule 84 (term_c -> OP_TIMES .)
    OP_NOT_EQUAL    reduce using rule 84 (term_c -> OP_TIMES .)
    OP_EQUALS       reduce using rule 84 (term_c -> OP_TIMES .)
    OP_GREATER_EQUAL reduce using rule 84 (term_c -> OP_TIMES .)
    OP_LESS_EQUAL   reduce using rule 84 (term_c -> OP_TIMES .)


state 178

    (90) factor -> SEP_LPAR exp SEP_RPAR .

    VAR_IDENTIFIER  reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_LPAR        reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    VAR_INT         reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    VAR_DECIMAL     reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    VAR_FRACTION    reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    IF              reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    ACTION          reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    CAMERA          reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_HASHTAG     reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    PRINT           reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    VAR             reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    RETURN          reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    LOOP            reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    FOR_EACH        reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    FOR             reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_RCBRACKET   reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    END             reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_RPAR        reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_SEMICOLON   reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    SEP_COMMA       reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_TIMES        reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_DIVISION     reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_PLUS         reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_MINUS        reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_LESS_THAN    reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_GREATER_THAN reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_NOT_EQUAL    reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_EQUALS       reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_GREATER_EQUAL reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)
    OP_LESS_EQUAL   reduce using rule 90 (factor -> SEP_LPAR exp SEP_RPAR .)


state 179

    (30) func_c -> vars . func_c
    (30) func_c -> . vars func_c
    (31) func_c -> . epsilon
    (115) vars -> . vars_start v_a
    (152) epsilon -> .
    (118) vars_start -> . VAR vs_a SEP_COLON

  ! shift/reduce conflict for VAR resolved as shift
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR             shift and go to state 9

  ! VAR             [ reduce using rule 152 (epsilon -> .) ]

    vars                           shift and go to state 179
    epsilon                        shift and go to state 180
    vars_start                     shift and go to state 8
    func_c                         shift and go to state 216

state 180

    (31) func_c -> epsilon .

    VAR_IDENTIFIER  reduce using rule 31 (func_c -> epsilon .)
    IF              reduce using rule 31 (func_c -> epsilon .)
    ACTION          reduce using rule 31 (func_c -> epsilon .)
    CAMERA          reduce using rule 31 (func_c -> epsilon .)
    SEP_HASHTAG     reduce using rule 31 (func_c -> epsilon .)
    PRINT           reduce using rule 31 (func_c -> epsilon .)
    VAR             reduce using rule 31 (func_c -> epsilon .)
    RETURN          reduce using rule 31 (func_c -> epsilon .)
    LOOP            reduce using rule 31 (func_c -> epsilon .)
    FOR_EACH        reduce using rule 31 (func_c -> epsilon .)
    FOR             reduce using rule 31 (func_c -> epsilon .)
    SEP_RCBRACKET   reduce using rule 31 (func_c -> epsilon .)


state 181

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c . stmt_loop SEP_RCBRACKET
    (32) stmt_loop -> . statement stmt_loop
    (33) stmt_loop -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    stmt_loop                      shift and go to state 217
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 187
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 188
    cycle                          shift and go to state 113
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 182

    (146) co_a -> VAR_ANYCHAR co_a .

    VAR_IDENTIFIER  reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    IF              reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    ACTION          reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    CAMERA          reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    SEP_HASHTAG     reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    PRINT           reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    VAR             reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    RETURN          reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    LOOP            reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    FOR_EACH        reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    FOR             reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    SEP_RCBRACKET   reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)
    END             reduce using rule 146 (co_a -> VAR_ANYCHAR co_a .)


state 183

    (148) print -> PRINT SEP_LPAR prin_a . SEP_RPAR

    SEP_RPAR        shift and go to state 218


state 184

    (150) prin_a -> VAR_STRING .

    SEP_RPAR        reduce using rule 150 (prin_a -> VAR_STRING .)


state 185

    (149) prin_a -> exp .

    SEP_RPAR        reduce using rule 149 (prin_a -> exp .)


state 186

    (102) do_block -> DO stmt_loop . END

    END             shift and go to state 219


state 187

    (32) stmt_loop -> statement . stmt_loop
    (32) stmt_loop -> . statement stmt_loop
    (33) stmt_loop -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    END             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    stmt_loop                      shift and go to state 220
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 187
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 188
    cycle                          shift and go to state 113
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 188

    (33) stmt_loop -> epsilon .

    END             reduce using rule 33 (stmt_loop -> epsilon .)
    SEP_RCBRACKET   reduce using rule 33 (stmt_loop -> epsilon .)


state 189

    (43) l_a -> VAR_INT .

    SEP_RPAR        reduce using rule 43 (l_a -> VAR_INT .)
    SEP_DOT         reduce using rule 43 (l_a -> VAR_INT .)


state 190

    (44) l_a -> VAR_IDENTIFIER .

    SEP_RPAR        reduce using rule 44 (l_a -> VAR_IDENTIFIER .)
    SEP_DOT         reduce using rule 44 (l_a -> VAR_IDENTIFIER .)


state 191

    (42) loop -> LOOP SEP_LPAR l_a . SEP_DOT SEP_DOT l_a SEP_RPAR do_block

    SEP_DOT         shift and go to state 221


state 192

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER . IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    IN              shift and go to state 222


state 193

    (48) for_a -> assignment .

    SEP_SEMICOLON   reduce using rule 48 (for_a -> assignment .)


state 194

    (49) for_a -> epsilon .

    SEP_SEMICOLON   reduce using rule 49 (for_a -> epsilon .)


state 195

    (47) for -> FOR SEP_LPAR for_a . SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_SEMICOLON   shift and go to state 223


state 196

    (37) assignment -> VAR_IDENTIFIER OP_EQUALS exp .

    VAR_IDENTIFIER  reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    IF              reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    ACTION          reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    CAMERA          reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    SEP_HASHTAG     reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    PRINT           reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    VAR             reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    RETURN          reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    LOOP            reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    FOR_EACH        reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    FOR             reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    SEP_RCBRACKET   reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    END             reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    SEP_RPAR        reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)
    SEP_SEMICOLON   reduce using rule 37 (assignment -> VAR_IDENTIFIER OP_EQUALS exp .)


state 197

    (57) act_header -> VAR_IDENTIFIER . DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    DO              shift and go to state 224


state 198

    (58) act_move -> MOVE act_header . POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END

    POS_X           shift and go to state 225


state 199

    (59) act_scale -> SCALE act_header . SIZE SEP_COLON exp SEP_COMMA END
    (60) act_rotate -> SCALE act_header . ANGLE SEP_COLON exp SEP_COMMA END

    SIZE            shift and go to state 227
    ANGLE           shift and go to state 226


state 200

    (61) act_visible -> HIDE act_header . END

    END             shift and go to state 228


state 201

    (62) act_visible -> SHOW act_header . END

    END             shift and go to state 229


state 202

    (151) figure_creations -> VAR VAR_IDENTIFIER SEP_COLON . figure HAS fig_create_block
    (17) figure -> . POINT
    (18) figure -> . LINE
    (19) figure -> . TRIANGLE
    (20) figure -> . SQUARE
    (21) figure -> . RECTANGLE
    (22) figure -> . POLYGON
    (23) figure -> . STAR
    (24) figure -> . CIRCLE

    POINT           shift and go to state 21
    LINE            shift and go to state 30
    TRIANGLE        shift and go to state 22
    SQUARE          shift and go to state 17
    RECTANGLE       shift and go to state 32
    POLYGON         shift and go to state 19
    STAR            shift and go to state 27
    CIRCLE          shift and go to state 25

    figure                         shift and go to state 230

state 203

    (64) condition -> exp . ex_a
    (65) condition -> exp .
    (66) ex_a -> . OP_LESS_THAN exp
    (67) ex_a -> . OP_GREATER_THAN exp
    (68) ex_a -> . OP_NOT_EQUAL exp
    (69) ex_a -> . OP_EQUALS exp
    (70) ex_a -> . OP_GREATER_EQUAL exp
    (71) ex_a -> . OP_LESS_EQUAL exp

    SEP_SEMICOLON   reduce using rule 65 (condition -> exp .)
    SEP_RPAR        reduce using rule 65 (condition -> exp .)
    OP_LESS_THAN    shift and go to state 232
    OP_GREATER_THAN shift and go to state 231
    OP_NOT_EQUAL    shift and go to state 235
    OP_EQUALS       shift and go to state 233
    OP_GREATER_EQUAL shift and go to state 237
    OP_LESS_EQUAL   shift and go to state 236

    ex_a                           shift and go to state 234

state 204

    (101) condition_block -> SEP_LPAR condition . SEP_RPAR do_block

    SEP_RPAR        shift and go to state 238


state 205

    (96) if_a -> epsilon .

    ELSE            reduce using rule 96 (if_a -> epsilon .)
    VAR_IDENTIFIER  reduce using rule 96 (if_a -> epsilon .)
    IF              reduce using rule 96 (if_a -> epsilon .)
    ACTION          reduce using rule 96 (if_a -> epsilon .)
    CAMERA          reduce using rule 96 (if_a -> epsilon .)
    SEP_HASHTAG     reduce using rule 96 (if_a -> epsilon .)
    PRINT           reduce using rule 96 (if_a -> epsilon .)
    VAR             reduce using rule 96 (if_a -> epsilon .)
    RETURN          reduce using rule 96 (if_a -> epsilon .)
    LOOP            reduce using rule 96 (if_a -> epsilon .)
    FOR_EACH        reduce using rule 96 (if_a -> epsilon .)
    FOR             reduce using rule 96 (if_a -> epsilon .)
    SEP_RCBRACKET   reduce using rule 96 (if_a -> epsilon .)
    END             reduce using rule 96 (if_a -> epsilon .)


state 206

    (99) elsif -> ELSIF . condition_block
    (101) condition_block -> . SEP_LPAR condition SEP_RPAR do_block

    SEP_LPAR        shift and go to state 167

    condition_block                shift and go to state 239

state 207

    (95) if_a -> elsif .

    ELSE            reduce using rule 95 (if_a -> elsif .)
    VAR_IDENTIFIER  reduce using rule 95 (if_a -> elsif .)
    IF              reduce using rule 95 (if_a -> elsif .)
    ACTION          reduce using rule 95 (if_a -> elsif .)
    CAMERA          reduce using rule 95 (if_a -> elsif .)
    SEP_HASHTAG     reduce using rule 95 (if_a -> elsif .)
    PRINT           reduce using rule 95 (if_a -> elsif .)
    VAR             reduce using rule 95 (if_a -> elsif .)
    RETURN          reduce using rule 95 (if_a -> elsif .)
    LOOP            reduce using rule 95 (if_a -> elsif .)
    FOR_EACH        reduce using rule 95 (if_a -> elsif .)
    FOR             reduce using rule 95 (if_a -> elsif .)
    SEP_RCBRACKET   reduce using rule 95 (if_a -> elsif .)
    END             reduce using rule 95 (if_a -> elsif .)


state 208

    (94) if -> IF condition_block if_a . if_b
    (97) if_b -> . else
    (98) if_b -> . epsilon
    (100) else -> . ELSE do_block
    (152) epsilon -> .

    ELSE            shift and go to state 242
    VAR_IDENTIFIER  reduce using rule 152 (epsilon -> .)
    IF              reduce using rule 152 (epsilon -> .)
    ACTION          reduce using rule 152 (epsilon -> .)
    CAMERA          reduce using rule 152 (epsilon -> .)
    SEP_HASHTAG     reduce using rule 152 (epsilon -> .)
    PRINT           reduce using rule 152 (epsilon -> .)
    VAR             reduce using rule 152 (epsilon -> .)
    RETURN          reduce using rule 152 (epsilon -> .)
    LOOP            reduce using rule 152 (epsilon -> .)
    FOR_EACH        reduce using rule 152 (epsilon -> .)
    FOR             reduce using rule 152 (epsilon -> .)
    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    END             reduce using rule 152 (epsilon -> .)

    epsilon                        shift and go to state 240
    else                           shift and go to state 241
    if_b                           shift and go to state 243

state 209

    (140) vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp . SEP_RPAR

    SEP_RPAR        shift and go to state 244


state 210

    (75) exp_b -> term exp_c exp_d .

    SEP_COMMA       reduce using rule 75 (exp_b -> term exp_c exp_d .)
    END             reduce using rule 75 (exp_b -> term exp_c exp_d .)
    SEP_RPAR        reduce using rule 75 (exp_b -> term exp_c exp_d .)
    VAR_IDENTIFIER  reduce using rule 75 (exp_b -> term exp_c exp_d .)
    IF              reduce using rule 75 (exp_b -> term exp_c exp_d .)
    ACTION          reduce using rule 75 (exp_b -> term exp_c exp_d .)
    CAMERA          reduce using rule 75 (exp_b -> term exp_c exp_d .)
    SEP_HASHTAG     reduce using rule 75 (exp_b -> term exp_c exp_d .)
    PRINT           reduce using rule 75 (exp_b -> term exp_c exp_d .)
    VAR             reduce using rule 75 (exp_b -> term exp_c exp_d .)
    RETURN          reduce using rule 75 (exp_b -> term exp_c exp_d .)
    LOOP            reduce using rule 75 (exp_b -> term exp_c exp_d .)
    FOR_EACH        reduce using rule 75 (exp_b -> term exp_c exp_d .)
    FOR             reduce using rule 75 (exp_b -> term exp_c exp_d .)
    SEP_RCBRACKET   reduce using rule 75 (exp_b -> term exp_c exp_d .)
    SEP_SEMICOLON   reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_LESS_THAN    reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_GREATER_THAN reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_NOT_EQUAL    reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_EQUALS       reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_GREATER_EQUAL reduce using rule 75 (exp_b -> term exp_c exp_d .)
    OP_LESS_EQUAL   reduce using rule 75 (exp_b -> term exp_c exp_d .)


state 211

    (78) exp_d -> exp_b .

    SEP_COMMA       reduce using rule 78 (exp_d -> exp_b .)
    END             reduce using rule 78 (exp_d -> exp_b .)
    SEP_RPAR        reduce using rule 78 (exp_d -> exp_b .)
    VAR_IDENTIFIER  reduce using rule 78 (exp_d -> exp_b .)
    IF              reduce using rule 78 (exp_d -> exp_b .)
    ACTION          reduce using rule 78 (exp_d -> exp_b .)
    CAMERA          reduce using rule 78 (exp_d -> exp_b .)
    SEP_HASHTAG     reduce using rule 78 (exp_d -> exp_b .)
    PRINT           reduce using rule 78 (exp_d -> exp_b .)
    VAR             reduce using rule 78 (exp_d -> exp_b .)
    RETURN          reduce using rule 78 (exp_d -> exp_b .)
    LOOP            reduce using rule 78 (exp_d -> exp_b .)
    FOR_EACH        reduce using rule 78 (exp_d -> exp_b .)
    FOR             reduce using rule 78 (exp_d -> exp_b .)
    SEP_RCBRACKET   reduce using rule 78 (exp_d -> exp_b .)
    SEP_SEMICOLON   reduce using rule 78 (exp_d -> exp_b .)
    OP_LESS_THAN    reduce using rule 78 (exp_d -> exp_b .)
    OP_GREATER_THAN reduce using rule 78 (exp_d -> exp_b .)
    OP_NOT_EQUAL    reduce using rule 78 (exp_d -> exp_b .)
    OP_EQUALS       reduce using rule 78 (exp_d -> exp_b .)
    OP_GREATER_EQUAL reduce using rule 78 (exp_d -> exp_b .)
    OP_LESS_EQUAL   reduce using rule 78 (exp_d -> exp_b .)


state 212

    (79) exp_d -> epsilon .

    SEP_COMMA       reduce using rule 79 (exp_d -> epsilon .)
    END             reduce using rule 79 (exp_d -> epsilon .)
    SEP_RPAR        reduce using rule 79 (exp_d -> epsilon .)
    VAR_IDENTIFIER  reduce using rule 79 (exp_d -> epsilon .)
    IF              reduce using rule 79 (exp_d -> epsilon .)
    ACTION          reduce using rule 79 (exp_d -> epsilon .)
    CAMERA          reduce using rule 79 (exp_d -> epsilon .)
    SEP_HASHTAG     reduce using rule 79 (exp_d -> epsilon .)
    PRINT           reduce using rule 79 (exp_d -> epsilon .)
    VAR             reduce using rule 79 (exp_d -> epsilon .)
    RETURN          reduce using rule 79 (exp_d -> epsilon .)
    LOOP            reduce using rule 79 (exp_d -> epsilon .)
    FOR_EACH        reduce using rule 79 (exp_d -> epsilon .)
    FOR             reduce using rule 79 (exp_d -> epsilon .)
    SEP_RCBRACKET   reduce using rule 79 (exp_d -> epsilon .)
    SEP_SEMICOLON   reduce using rule 79 (exp_d -> epsilon .)
    OP_LESS_THAN    reduce using rule 79 (exp_d -> epsilon .)
    OP_GREATER_THAN reduce using rule 79 (exp_d -> epsilon .)
    OP_NOT_EQUAL    reduce using rule 79 (exp_d -> epsilon .)
    OP_EQUALS       reduce using rule 79 (exp_d -> epsilon .)
    OP_GREATER_EQUAL reduce using rule 79 (exp_d -> epsilon .)
    OP_LESS_EQUAL   reduce using rule 79 (exp_d -> epsilon .)


state 213

    (86) term_d -> term_b .

    VAR_IDENTIFIER  reduce using rule 86 (term_d -> term_b .)
    SEP_LPAR        reduce using rule 86 (term_d -> term_b .)
    VAR_INT         reduce using rule 86 (term_d -> term_b .)
    VAR_DECIMAL     reduce using rule 86 (term_d -> term_b .)
    VAR_FRACTION    reduce using rule 86 (term_d -> term_b .)
    SEP_COMMA       reduce using rule 86 (term_d -> term_b .)
    END             reduce using rule 86 (term_d -> term_b .)
    OP_PLUS         reduce using rule 86 (term_d -> term_b .)
    OP_MINUS        reduce using rule 86 (term_d -> term_b .)
    SEP_RPAR        reduce using rule 86 (term_d -> term_b .)
    IF              reduce using rule 86 (term_d -> term_b .)
    ACTION          reduce using rule 86 (term_d -> term_b .)
    CAMERA          reduce using rule 86 (term_d -> term_b .)
    SEP_HASHTAG     reduce using rule 86 (term_d -> term_b .)
    PRINT           reduce using rule 86 (term_d -> term_b .)
    VAR             reduce using rule 86 (term_d -> term_b .)
    RETURN          reduce using rule 86 (term_d -> term_b .)
    LOOP            reduce using rule 86 (term_d -> term_b .)
    FOR_EACH        reduce using rule 86 (term_d -> term_b .)
    FOR             reduce using rule 86 (term_d -> term_b .)
    SEP_RCBRACKET   reduce using rule 86 (term_d -> term_b .)
    SEP_SEMICOLON   reduce using rule 86 (term_d -> term_b .)
    OP_LESS_THAN    reduce using rule 86 (term_d -> term_b .)
    OP_GREATER_THAN reduce using rule 86 (term_d -> term_b .)
    OP_NOT_EQUAL    reduce using rule 86 (term_d -> term_b .)
    OP_EQUALS       reduce using rule 86 (term_d -> term_b .)
    OP_GREATER_EQUAL reduce using rule 86 (term_d -> term_b .)
    OP_LESS_EQUAL   reduce using rule 86 (term_d -> term_b .)


state 214

    (83) term_b -> factor term_c term_d .

    VAR_IDENTIFIER  reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_LPAR        reduce using rule 83 (term_b -> factor term_c term_d .)
    VAR_INT         reduce using rule 83 (term_b -> factor term_c term_d .)
    VAR_DECIMAL     reduce using rule 83 (term_b -> factor term_c term_d .)
    VAR_FRACTION    reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_COMMA       reduce using rule 83 (term_b -> factor term_c term_d .)
    END             reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_PLUS         reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_MINUS        reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_RPAR        reduce using rule 83 (term_b -> factor term_c term_d .)
    IF              reduce using rule 83 (term_b -> factor term_c term_d .)
    ACTION          reduce using rule 83 (term_b -> factor term_c term_d .)
    CAMERA          reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_HASHTAG     reduce using rule 83 (term_b -> factor term_c term_d .)
    PRINT           reduce using rule 83 (term_b -> factor term_c term_d .)
    VAR             reduce using rule 83 (term_b -> factor term_c term_d .)
    RETURN          reduce using rule 83 (term_b -> factor term_c term_d .)
    LOOP            reduce using rule 83 (term_b -> factor term_c term_d .)
    FOR_EACH        reduce using rule 83 (term_b -> factor term_c term_d .)
    FOR             reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_RCBRACKET   reduce using rule 83 (term_b -> factor term_c term_d .)
    SEP_SEMICOLON   reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_LESS_THAN    reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_GREATER_THAN reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_NOT_EQUAL    reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_EQUALS       reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_GREATER_EQUAL reduce using rule 83 (term_b -> factor term_c term_d .)
    OP_LESS_EQUAL   reduce using rule 83 (term_b -> factor term_c term_d .)


state 215

    (87) term_d -> epsilon .

    VAR_IDENTIFIER  reduce using rule 87 (term_d -> epsilon .)
    SEP_LPAR        reduce using rule 87 (term_d -> epsilon .)
    VAR_INT         reduce using rule 87 (term_d -> epsilon .)
    VAR_DECIMAL     reduce using rule 87 (term_d -> epsilon .)
    VAR_FRACTION    reduce using rule 87 (term_d -> epsilon .)
    SEP_COMMA       reduce using rule 87 (term_d -> epsilon .)
    END             reduce using rule 87 (term_d -> epsilon .)
    OP_PLUS         reduce using rule 87 (term_d -> epsilon .)
    OP_MINUS        reduce using rule 87 (term_d -> epsilon .)
    SEP_RPAR        reduce using rule 87 (term_d -> epsilon .)
    IF              reduce using rule 87 (term_d -> epsilon .)
    ACTION          reduce using rule 87 (term_d -> epsilon .)
    CAMERA          reduce using rule 87 (term_d -> epsilon .)
    SEP_HASHTAG     reduce using rule 87 (term_d -> epsilon .)
    PRINT           reduce using rule 87 (term_d -> epsilon .)
    VAR             reduce using rule 87 (term_d -> epsilon .)
    RETURN          reduce using rule 87 (term_d -> epsilon .)
    LOOP            reduce using rule 87 (term_d -> epsilon .)
    FOR_EACH        reduce using rule 87 (term_d -> epsilon .)
    FOR             reduce using rule 87 (term_d -> epsilon .)
    SEP_RCBRACKET   reduce using rule 87 (term_d -> epsilon .)
    SEP_SEMICOLON   reduce using rule 87 (term_d -> epsilon .)
    OP_LESS_THAN    reduce using rule 87 (term_d -> epsilon .)
    OP_GREATER_THAN reduce using rule 87 (term_d -> epsilon .)
    OP_NOT_EQUAL    reduce using rule 87 (term_d -> epsilon .)
    OP_EQUALS       reduce using rule 87 (term_d -> epsilon .)
    OP_GREATER_EQUAL reduce using rule 87 (term_d -> epsilon .)
    OP_LESS_EQUAL   reduce using rule 87 (term_d -> epsilon .)


state 216

    (30) func_c -> vars func_c .

    VAR_IDENTIFIER  reduce using rule 30 (func_c -> vars func_c .)
    IF              reduce using rule 30 (func_c -> vars func_c .)
    ACTION          reduce using rule 30 (func_c -> vars func_c .)
    CAMERA          reduce using rule 30 (func_c -> vars func_c .)
    SEP_HASHTAG     reduce using rule 30 (func_c -> vars func_c .)
    PRINT           reduce using rule 30 (func_c -> vars func_c .)
    VAR             reduce using rule 30 (func_c -> vars func_c .)
    RETURN          reduce using rule 30 (func_c -> vars func_c .)
    LOOP            reduce using rule 30 (func_c -> vars func_c .)
    FOR_EACH        reduce using rule 30 (func_c -> vars func_c .)
    FOR             reduce using rule 30 (func_c -> vars func_c .)
    SEP_RCBRACKET   reduce using rule 30 (func_c -> vars func_c .)


state 217

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop . SEP_RCBRACKET

    SEP_RCBRACKET   shift and go to state 245


state 218

    (148) print -> PRINT SEP_LPAR prin_a SEP_RPAR .

    VAR_IDENTIFIER  reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    IF              reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    ACTION          reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    CAMERA          reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    SEP_HASHTAG     reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    PRINT           reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    VAR             reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    RETURN          reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    LOOP            reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    FOR_EACH        reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    FOR             reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    END             reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)
    SEP_RCBRACKET   reduce using rule 148 (print -> PRINT SEP_LPAR prin_a SEP_RPAR .)


state 219

    (102) do_block -> DO stmt_loop END .

    DO              reduce using rule 102 (do_block -> DO stmt_loop END .)
    VAR_IDENTIFIER  reduce using rule 102 (do_block -> DO stmt_loop END .)
    IF              reduce using rule 102 (do_block -> DO stmt_loop END .)
    ACTION          reduce using rule 102 (do_block -> DO stmt_loop END .)
    CAMERA          reduce using rule 102 (do_block -> DO stmt_loop END .)
    SEP_HASHTAG     reduce using rule 102 (do_block -> DO stmt_loop END .)
    PRINT           reduce using rule 102 (do_block -> DO stmt_loop END .)
    VAR             reduce using rule 102 (do_block -> DO stmt_loop END .)
    RETURN          reduce using rule 102 (do_block -> DO stmt_loop END .)
    LOOP            reduce using rule 102 (do_block -> DO stmt_loop END .)
    FOR_EACH        reduce using rule 102 (do_block -> DO stmt_loop END .)
    FOR             reduce using rule 102 (do_block -> DO stmt_loop END .)
    SEP_RCBRACKET   reduce using rule 102 (do_block -> DO stmt_loop END .)
    END             reduce using rule 102 (do_block -> DO stmt_loop END .)
    ELSIF           reduce using rule 102 (do_block -> DO stmt_loop END .)
    ELSE            reduce using rule 102 (do_block -> DO stmt_loop END .)


state 220

    (32) stmt_loop -> statement stmt_loop .

    END             reduce using rule 32 (stmt_loop -> statement stmt_loop .)
    SEP_RCBRACKET   reduce using rule 32 (stmt_loop -> statement stmt_loop .)


state 221

    (42) loop -> LOOP SEP_LPAR l_a SEP_DOT . SEP_DOT l_a SEP_RPAR do_block

    SEP_DOT         shift and go to state 246


state 222

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN . fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (46) fore_a -> . VAR_IDENTIFIER

    VAR_IDENTIFIER  shift and go to state 248

    fore_a                         shift and go to state 247

state 223

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON . condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (64) condition -> . exp ex_a
    (65) condition -> . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 203
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92
    condition                      shift and go to state 249

state 224

    (57) act_header -> VAR_IDENTIFIER DO . BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    BEGINS          shift and go to state 250


state 225

    (58) act_move -> MOVE act_header POS_X . SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END

    SEP_COLON       shift and go to state 251


state 226

    (60) act_rotate -> SCALE act_header ANGLE . SEP_COLON exp SEP_COMMA END

    SEP_COLON       shift and go to state 252


state 227

    (59) act_scale -> SCALE act_header SIZE . SEP_COLON exp SEP_COMMA END

    SEP_COLON       shift and go to state 253


state 228

    (61) act_visible -> HIDE act_header END .

    VAR_IDENTIFIER  reduce using rule 61 (act_visible -> HIDE act_header END .)
    IF              reduce using rule 61 (act_visible -> HIDE act_header END .)
    ACTION          reduce using rule 61 (act_visible -> HIDE act_header END .)
    CAMERA          reduce using rule 61 (act_visible -> HIDE act_header END .)
    SEP_HASHTAG     reduce using rule 61 (act_visible -> HIDE act_header END .)
    PRINT           reduce using rule 61 (act_visible -> HIDE act_header END .)
    VAR             reduce using rule 61 (act_visible -> HIDE act_header END .)
    RETURN          reduce using rule 61 (act_visible -> HIDE act_header END .)
    LOOP            reduce using rule 61 (act_visible -> HIDE act_header END .)
    FOR_EACH        reduce using rule 61 (act_visible -> HIDE act_header END .)
    FOR             reduce using rule 61 (act_visible -> HIDE act_header END .)
    SEP_RCBRACKET   reduce using rule 61 (act_visible -> HIDE act_header END .)
    END             reduce using rule 61 (act_visible -> HIDE act_header END .)


state 229

    (62) act_visible -> SHOW act_header END .

    VAR_IDENTIFIER  reduce using rule 62 (act_visible -> SHOW act_header END .)
    IF              reduce using rule 62 (act_visible -> SHOW act_header END .)
    ACTION          reduce using rule 62 (act_visible -> SHOW act_header END .)
    CAMERA          reduce using rule 62 (act_visible -> SHOW act_header END .)
    SEP_HASHTAG     reduce using rule 62 (act_visible -> SHOW act_header END .)
    PRINT           reduce using rule 62 (act_visible -> SHOW act_header END .)
    VAR             reduce using rule 62 (act_visible -> SHOW act_header END .)
    RETURN          reduce using rule 62 (act_visible -> SHOW act_header END .)
    LOOP            reduce using rule 62 (act_visible -> SHOW act_header END .)
    FOR_EACH        reduce using rule 62 (act_visible -> SHOW act_header END .)
    FOR             reduce using rule 62 (act_visible -> SHOW act_header END .)
    SEP_RCBRACKET   reduce using rule 62 (act_visible -> SHOW act_header END .)
    END             reduce using rule 62 (act_visible -> SHOW act_header END .)


state 230

    (151) figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure . HAS fig_create_block

    HAS             shift and go to state 254


state 231

    (67) ex_a -> OP_GREATER_THAN . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 255
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 232

    (66) ex_a -> OP_LESS_THAN . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 256
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 233

    (69) ex_a -> OP_EQUALS . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 257
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 234

    (64) condition -> exp ex_a .

    SEP_SEMICOLON   reduce using rule 64 (condition -> exp ex_a .)
    SEP_RPAR        reduce using rule 64 (condition -> exp ex_a .)


state 235

    (68) ex_a -> OP_NOT_EQUAL . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 258
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 236

    (71) ex_a -> OP_LESS_EQUAL . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 259
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 237

    (70) ex_a -> OP_GREATER_EQUAL . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 260
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 238

    (101) condition_block -> SEP_LPAR condition SEP_RPAR . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    do_block                       shift and go to state 261

state 239

    (99) elsif -> ELSIF condition_block .

    ELSE            reduce using rule 99 (elsif -> ELSIF condition_block .)
    VAR_IDENTIFIER  reduce using rule 99 (elsif -> ELSIF condition_block .)
    IF              reduce using rule 99 (elsif -> ELSIF condition_block .)
    ACTION          reduce using rule 99 (elsif -> ELSIF condition_block .)
    CAMERA          reduce using rule 99 (elsif -> ELSIF condition_block .)
    SEP_HASHTAG     reduce using rule 99 (elsif -> ELSIF condition_block .)
    PRINT           reduce using rule 99 (elsif -> ELSIF condition_block .)
    VAR             reduce using rule 99 (elsif -> ELSIF condition_block .)
    RETURN          reduce using rule 99 (elsif -> ELSIF condition_block .)
    LOOP            reduce using rule 99 (elsif -> ELSIF condition_block .)
    FOR_EACH        reduce using rule 99 (elsif -> ELSIF condition_block .)
    FOR             reduce using rule 99 (elsif -> ELSIF condition_block .)
    SEP_RCBRACKET   reduce using rule 99 (elsif -> ELSIF condition_block .)
    END             reduce using rule 99 (elsif -> ELSIF condition_block .)


state 240

    (98) if_b -> epsilon .

    VAR_IDENTIFIER  reduce using rule 98 (if_b -> epsilon .)
    IF              reduce using rule 98 (if_b -> epsilon .)
    ACTION          reduce using rule 98 (if_b -> epsilon .)
    CAMERA          reduce using rule 98 (if_b -> epsilon .)
    SEP_HASHTAG     reduce using rule 98 (if_b -> epsilon .)
    PRINT           reduce using rule 98 (if_b -> epsilon .)
    VAR             reduce using rule 98 (if_b -> epsilon .)
    RETURN          reduce using rule 98 (if_b -> epsilon .)
    LOOP            reduce using rule 98 (if_b -> epsilon .)
    FOR_EACH        reduce using rule 98 (if_b -> epsilon .)
    FOR             reduce using rule 98 (if_b -> epsilon .)
    SEP_RCBRACKET   reduce using rule 98 (if_b -> epsilon .)
    END             reduce using rule 98 (if_b -> epsilon .)


state 241

    (97) if_b -> else .

    VAR_IDENTIFIER  reduce using rule 97 (if_b -> else .)
    IF              reduce using rule 97 (if_b -> else .)
    ACTION          reduce using rule 97 (if_b -> else .)
    CAMERA          reduce using rule 97 (if_b -> else .)
    SEP_HASHTAG     reduce using rule 97 (if_b -> else .)
    PRINT           reduce using rule 97 (if_b -> else .)
    VAR             reduce using rule 97 (if_b -> else .)
    RETURN          reduce using rule 97 (if_b -> else .)
    LOOP            reduce using rule 97 (if_b -> else .)
    FOR_EACH        reduce using rule 97 (if_b -> else .)
    FOR             reduce using rule 97 (if_b -> else .)
    SEP_RCBRACKET   reduce using rule 97 (if_b -> else .)
    END             reduce using rule 97 (if_b -> else .)


state 242

    (100) else -> ELSE . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    do_block                       shift and go to state 262

state 243

    (94) if -> IF condition_block if_a if_b .

    VAR_IDENTIFIER  reduce using rule 94 (if -> IF condition_block if_a if_b .)
    IF              reduce using rule 94 (if -> IF condition_block if_a if_b .)
    ACTION          reduce using rule 94 (if -> IF condition_block if_a if_b .)
    CAMERA          reduce using rule 94 (if -> IF condition_block if_a if_b .)
    SEP_HASHTAG     reduce using rule 94 (if -> IF condition_block if_a if_b .)
    PRINT           reduce using rule 94 (if -> IF condition_block if_a if_b .)
    VAR             reduce using rule 94 (if -> IF condition_block if_a if_b .)
    RETURN          reduce using rule 94 (if -> IF condition_block if_a if_b .)
    LOOP            reduce using rule 94 (if -> IF condition_block if_a if_b .)
    FOR_EACH        reduce using rule 94 (if -> IF condition_block if_a if_b .)
    FOR             reduce using rule 94 (if -> IF condition_block if_a if_b .)
    SEP_RCBRACKET   reduce using rule 94 (if -> IF condition_block if_a if_b .)
    END             reduce using rule 94 (if -> IF condition_block if_a if_b .)


state 244

    (140) vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR .

    SEP_COMMA       reduce using rule 140 (vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR .)
    END             reduce using rule 140 (vector -> VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR .)


state 245

    (25) function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET .

    FUNCTION        reduce using rule 25 (function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET .)
    LIGHT_TOKEN     reduce using rule 25 (function -> FUNCTION VAR_IDENTIFIER SEP_LPAR func_a SEP_RPAR func_b SEP_LCBRACKET func_c stmt_loop SEP_RCBRACKET .)


state 246

    (42) loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT . l_a SEP_RPAR do_block
    (43) l_a -> . VAR_INT
    (44) l_a -> . VAR_IDENTIFIER

    VAR_INT         shift and go to state 189
    VAR_IDENTIFIER  shift and go to state 190

    l_a                            shift and go to state 263

state 247

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a . SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RPAR        shift and go to state 264


state 248

    (46) fore_a -> VAR_IDENTIFIER .

    SEP_RPAR        reduce using rule 46 (fore_a -> VAR_IDENTIFIER .)


state 249

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition . SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_SEMICOLON   shift and go to state 265


state 250

    (57) act_header -> VAR_IDENTIFIER DO BEGINS . SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    SEP_COLON       shift and go to state 266


state 251

    (58) act_move -> MOVE act_header POS_X SEP_COLON . exp SEP_COMMA POS_Y SEP_COLON exp END
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 267
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 252

    (60) act_rotate -> SCALE act_header ANGLE SEP_COLON . exp SEP_COMMA END
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 268
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 253

    (59) act_scale -> SCALE act_header SIZE SEP_COLON . exp SEP_COMMA END
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 269
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 254

    (151) figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS . fig_create_block
    (133) fig_create_block -> . fig_a END
    (134) fig_a -> . fig_attr fig_b
    (137) fig_attr -> . vector
    (138) fig_attr -> . COLOR SEP_COLON VAR_IDENTIFIER
    (139) fig_attr -> . SIZE SEP_COLON exp
    (140) vector -> . VAR_VECTORID SEP_COLON SEP_LPAR exp SEP_COMMA exp SEP_RPAR

    COLOR           shift and go to state 64
    SIZE            shift and go to state 68
    VAR_VECTORID    shift and go to state 62

    fig_create_block               shift and go to state 270
    vector                         shift and go to state 63
    fig_a                          shift and go to state 66
    fig_attr                       shift and go to state 67

state 255

    (67) ex_a -> OP_GREATER_THAN exp .

    SEP_RPAR        reduce using rule 67 (ex_a -> OP_GREATER_THAN exp .)
    SEP_SEMICOLON   reduce using rule 67 (ex_a -> OP_GREATER_THAN exp .)


state 256

    (66) ex_a -> OP_LESS_THAN exp .

    SEP_RPAR        reduce using rule 66 (ex_a -> OP_LESS_THAN exp .)
    SEP_SEMICOLON   reduce using rule 66 (ex_a -> OP_LESS_THAN exp .)


state 257

    (69) ex_a -> OP_EQUALS exp .

    SEP_RPAR        reduce using rule 69 (ex_a -> OP_EQUALS exp .)
    SEP_SEMICOLON   reduce using rule 69 (ex_a -> OP_EQUALS exp .)


state 258

    (68) ex_a -> OP_NOT_EQUAL exp .

    SEP_RPAR        reduce using rule 68 (ex_a -> OP_NOT_EQUAL exp .)
    SEP_SEMICOLON   reduce using rule 68 (ex_a -> OP_NOT_EQUAL exp .)


state 259

    (71) ex_a -> OP_LESS_EQUAL exp .

    SEP_RPAR        reduce using rule 71 (ex_a -> OP_LESS_EQUAL exp .)
    SEP_SEMICOLON   reduce using rule 71 (ex_a -> OP_LESS_EQUAL exp .)


state 260

    (70) ex_a -> OP_GREATER_EQUAL exp .

    SEP_RPAR        reduce using rule 70 (ex_a -> OP_GREATER_EQUAL exp .)
    SEP_SEMICOLON   reduce using rule 70 (ex_a -> OP_GREATER_EQUAL exp .)


state 261

    (101) condition_block -> SEP_LPAR condition SEP_RPAR do_block .

    ELSIF           reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    ELSE            reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    VAR_IDENTIFIER  reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    IF              reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    ACTION          reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    CAMERA          reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    SEP_HASHTAG     reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    PRINT           reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    VAR             reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    RETURN          reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    LOOP            reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    FOR_EACH        reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    FOR             reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    SEP_RCBRACKET   reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)
    END             reduce using rule 101 (condition_block -> SEP_LPAR condition SEP_RPAR do_block .)


state 262

    (100) else -> ELSE do_block .

    VAR_IDENTIFIER  reduce using rule 100 (else -> ELSE do_block .)
    IF              reduce using rule 100 (else -> ELSE do_block .)
    ACTION          reduce using rule 100 (else -> ELSE do_block .)
    CAMERA          reduce using rule 100 (else -> ELSE do_block .)
    SEP_HASHTAG     reduce using rule 100 (else -> ELSE do_block .)
    PRINT           reduce using rule 100 (else -> ELSE do_block .)
    VAR             reduce using rule 100 (else -> ELSE do_block .)
    RETURN          reduce using rule 100 (else -> ELSE do_block .)
    LOOP            reduce using rule 100 (else -> ELSE do_block .)
    FOR_EACH        reduce using rule 100 (else -> ELSE do_block .)
    FOR             reduce using rule 100 (else -> ELSE do_block .)
    SEP_RCBRACKET   reduce using rule 100 (else -> ELSE do_block .)
    END             reduce using rule 100 (else -> ELSE do_block .)


state 263

    (42) loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a . SEP_RPAR do_block

    SEP_RPAR        shift and go to state 271


state 264

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR . SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_LCBRACKET   shift and go to state 272


state 265

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON . for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (50) for_b -> . increment
    (51) for_b -> . assignment
    (91) increment -> . VAR_IDENTIFIER inc_a exp
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp

    VAR_IDENTIFIER  shift and go to state 274

    assignment                     shift and go to state 273
    increment                      shift and go to state 275
    for_b                          shift and go to state 276

state 266

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON . exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 277
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 267

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp . SEP_COMMA POS_Y SEP_COLON exp END

    SEP_COMMA       shift and go to state 278


state 268

    (60) act_rotate -> SCALE act_header ANGLE SEP_COLON exp . SEP_COMMA END

    SEP_COMMA       shift and go to state 279


state 269

    (59) act_scale -> SCALE act_header SIZE SEP_COLON exp . SEP_COMMA END

    SEP_COMMA       shift and go to state 280


state 270

    (151) figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .

    VAR_IDENTIFIER  reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    IF              reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    ACTION          reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    CAMERA          reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    SEP_HASHTAG     reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    PRINT           reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    VAR             reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    RETURN          reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    LOOP            reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    FOR_EACH        reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    FOR             reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    SEP_RCBRACKET   reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)
    END             reduce using rule 151 (figure_creations -> VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block .)


state 271

    (42) loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR . do_block
    (102) do_block -> . DO stmt_loop END

    DO              shift and go to state 148

    do_block                       shift and go to state 281

state 272

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET . stmt_loop SEP_RCBRACKET
    (32) stmt_loop -> . statement stmt_loop
    (33) stmt_loop -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    stmt_loop                      shift and go to state 282
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 187
    assignment                     shift and go to state 117
    print                          shift and go to state 112
    return                         shift and go to state 115
    epsilon                        shift and go to state 188
    cycle                          shift and go to state 113
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 273

    (51) for_b -> assignment .

    SEP_RPAR        reduce using rule 51 (for_b -> assignment .)


state 274

    (91) increment -> VAR_IDENTIFIER . inc_a exp
    (37) assignment -> VAR_IDENTIFIER . OP_EQUALS exp
    (92) inc_a -> . OP_PLUS_EQUALS
    (93) inc_a -> . OP_MINUS_EQUALS

    OP_EQUALS       shift and go to state 156
    OP_PLUS_EQUALS  shift and go to state 285
    OP_MINUS_EQUALS shift and go to state 284

    inc_a                          shift and go to state 283

state 275

    (50) for_b -> increment .

    SEP_RPAR        reduce using rule 50 (for_b -> increment .)


state 276

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b . SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RPAR        shift and go to state 286


state 277

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp . SEP_COMMA ENDS SEP_COLON exp SEP_COMMA

    SEP_COMMA       shift and go to state 287


state 278

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA . POS_Y SEP_COLON exp END

    POS_Y           shift and go to state 288


state 279

    (60) act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA . END

    END             shift and go to state 289


state 280

    (59) act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA . END

    END             shift and go to state 290


state 281

    (42) loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block .

    DO              reduce using rule 42 (loop -> LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block .)


state 282

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop . SEP_RCBRACKET

    SEP_RCBRACKET   shift and go to state 291


state 283

    (91) increment -> VAR_IDENTIFIER inc_a . exp
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 292
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 284

    (93) inc_a -> OP_MINUS_EQUALS .

    VAR_IDENTIFIER  reduce using rule 93 (inc_a -> OP_MINUS_EQUALS .)
    SEP_LPAR        reduce using rule 93 (inc_a -> OP_MINUS_EQUALS .)
    VAR_INT         reduce using rule 93 (inc_a -> OP_MINUS_EQUALS .)
    VAR_DECIMAL     reduce using rule 93 (inc_a -> OP_MINUS_EQUALS .)
    VAR_FRACTION    reduce using rule 93 (inc_a -> OP_MINUS_EQUALS .)


state 285

    (92) inc_a -> OP_PLUS_EQUALS .

    VAR_IDENTIFIER  reduce using rule 92 (inc_a -> OP_PLUS_EQUALS .)
    SEP_LPAR        reduce using rule 92 (inc_a -> OP_PLUS_EQUALS .)
    VAR_INT         reduce using rule 92 (inc_a -> OP_PLUS_EQUALS .)
    VAR_DECIMAL     reduce using rule 92 (inc_a -> OP_PLUS_EQUALS .)
    VAR_FRACTION    reduce using rule 92 (inc_a -> OP_PLUS_EQUALS .)


state 286

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR . SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_LCBRACKET   shift and go to state 293


state 287

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA . ENDS SEP_COLON exp SEP_COMMA

    ENDS            shift and go to state 294


state 288

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y . SEP_COLON exp END

    SEP_COLON       shift and go to state 295


state 289

    (60) act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .

    VAR_IDENTIFIER  reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    IF              reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    ACTION          reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    CAMERA          reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    SEP_HASHTAG     reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    PRINT           reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    VAR             reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    RETURN          reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    LOOP            reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    FOR_EACH        reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    FOR             reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    SEP_RCBRACKET   reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)
    END             reduce using rule 60 (act_rotate -> SCALE act_header ANGLE SEP_COLON exp SEP_COMMA END .)


state 290

    (59) act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .

    VAR_IDENTIFIER  reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    IF              reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    ACTION          reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    CAMERA          reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    SEP_HASHTAG     reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    PRINT           reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    VAR             reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    RETURN          reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    LOOP            reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    FOR_EACH        reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    FOR             reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    SEP_RCBRACKET   reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)
    END             reduce using rule 59 (act_scale -> SCALE act_header SIZE SEP_COLON exp SEP_COMMA END .)


state 291

    (45) for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET .

    DO              reduce using rule 45 (for_each -> FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET .)


state 292

    (91) increment -> VAR_IDENTIFIER inc_a exp .

    SEP_RPAR        reduce using rule 91 (increment -> VAR_IDENTIFIER inc_a exp .)


state 293

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET . stmt_loop SEP_RCBRACKET
    (32) stmt_loop -> . statement stmt_loop
    (33) stmt_loop -> . epsilon
    (103) statement -> . assignment
    (104) statement -> . if
    (105) statement -> . cycle
    (106) statement -> . action
    (107) statement -> . camera
    (108) statement -> . comments
    (109) statement -> . print
    (110) statement -> . figure_creations
    (111) statement -> . return
    (152) epsilon -> .
    (37) assignment -> . VAR_IDENTIFIER OP_EQUALS exp
    (94) if -> . IF condition_block if_a if_b
    (38) cycle -> . loop cyc_a
    (39) cycle -> . for_each cyc_a
    (40) cycle -> . for cyc_a
    (52) action -> . ACTION act_a
    (63) camera -> . CAMERA VAR_IDENTIFIER
    (145) comments -> . SEP_HASHTAG co_a
    (148) print -> . PRINT SEP_LPAR prin_a SEP_RPAR
    (151) figure_creations -> . VAR VAR_IDENTIFIER SEP_COLON figure HAS fig_create_block
    (144) return -> . RETURN exp
    (42) loop -> . LOOP SEP_LPAR l_a SEP_DOT SEP_DOT l_a SEP_RPAR do_block
    (45) for_each -> . FOR_EACH SEP_LPAR VAR_IDENTIFIER IN fore_a SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET
    (47) for -> . FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET

    SEP_RCBRACKET   reduce using rule 152 (epsilon -> .)
    VAR_IDENTIFIER  shift and go to state 118
    IF              shift and go to state 122
    ACTION          shift and go to state 120
    CAMERA          shift and go to state 102
    SEP_HASHTAG     shift and go to state 103
    PRINT           shift and go to state 104
    VAR             shift and go to state 121
    RETURN          shift and go to state 101
    LOOP            shift and go to state 108
    FOR_EACH        shift and go to state 114
    FOR             shift and go to state 116

    if                             shift and go to state 105
    stmt_loop                      shift and go to state 296
    for                            shift and go to state 106
    for_each                       shift and go to state 107
    comments                       shift and go to state 109
    camera                         shift and go to state 110
    statement                      shift and go to state 187
    epsilon                        shift and go to state 188
    print                          shift and go to state 112
    return                         shift and go to state 115
    assignment                     shift and go to state 117
    cycle                          shift and go to state 113
    figure_creations               shift and go to state 124
    action                         shift and go to state 126
    loop                           shift and go to state 125

state 294

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS . SEP_COLON exp SEP_COMMA

    SEP_COLON       shift and go to state 297


state 295

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON . exp END
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 298
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 296

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop . SEP_RCBRACKET

    SEP_RCBRACKET   shift and go to state 299


state 297

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON . exp SEP_COMMA
    (72) exp -> . term exp_a
    (80) term -> . factor term_a
    (88) factor -> . VAR_IDENTIFIER
    (89) factor -> . cnt_prim
    (90) factor -> . SEP_LPAR exp SEP_RPAR
    (141) cnt_prim -> . VAR_INT
    (142) cnt_prim -> . VAR_DECIMAL
    (143) cnt_prim -> . VAR_FRACTION

    VAR_IDENTIFIER  shift and go to state 89
    SEP_LPAR        shift and go to state 93
    VAR_INT         shift and go to state 56
    VAR_DECIMAL     shift and go to state 55
    VAR_FRACTION    shift and go to state 57

    term                           shift and go to state 88
    exp                            shift and go to state 300
    factor                         shift and go to state 91
    cnt_prim                       shift and go to state 92

state 298

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp . END

    END             shift and go to state 301


state 299

    (47) for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET .

    DO              reduce using rule 47 (for -> FOR SEP_LPAR for_a SEP_SEMICOLON condition SEP_SEMICOLON for_b SEP_RPAR SEP_LCBRACKET stmt_loop SEP_RCBRACKET .)


state 300

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp . SEP_COMMA

    SEP_COMMA       shift and go to state 302


state 301

    (58) act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .

    VAR_IDENTIFIER  reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    IF              reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    ACTION          reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    CAMERA          reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    SEP_HASHTAG     reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    PRINT           reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    VAR             reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    RETURN          reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    LOOP            reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    FOR_EACH        reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    FOR             reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    SEP_RCBRACKET   reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)
    END             reduce using rule 58 (act_move -> MOVE act_header POS_X SEP_COLON exp SEP_COMMA POS_Y SEP_COLON exp END .)


state 302

    (57) act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA .

    POS_X           reduce using rule 57 (act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA .)
    END             reduce using rule 57 (act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA .)
    SIZE            reduce using rule 57 (act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA .)
    ANGLE           reduce using rule 57 (act_header -> VAR_IDENTIFIER DO BEGINS SEP_COLON exp SEP_COMMA ENDS SEP_COLON exp SEP_COMMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR_IDENTIFIER in state 88 resolved as shift
WARNING: shift/reduce conflict for VAR_IDENTIFIER in state 91 resolved as shift
WARNING: shift/reduce conflict for SEP_LPAR in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR_INT in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR_DECIMAL in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR_FRACTION in state 91 resolved as shift
WARNING: shift/reduce conflict for VAR in state 141 resolved as shift
WARNING: shift/reduce conflict for VAR_IDENTIFIER in state 173 resolved as shift
WARNING: shift/reduce conflict for VAR_IDENTIFIER in state 176 resolved as shift
WARNING: shift/reduce conflict for SEP_LPAR in state 176 resolved as shift
WARNING: shift/reduce conflict for VAR_INT in state 176 resolved as shift
WARNING: shift/reduce conflict for VAR_DECIMAL in state 176 resolved as shift
WARNING: shift/reduce conflict for VAR_FRACTION in state 176 resolved as shift
WARNING: shift/reduce conflict for VAR in state 179 resolved as shift
