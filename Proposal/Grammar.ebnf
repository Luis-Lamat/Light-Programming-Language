PROGRAM ::= 'program' 'id' '{'  (VARS)*  (FUNCTION)* MAIN_FUNC '}'

MAIN_FUNC ::= 'light()' '{' (WINDOW_NAME)? (WINDOW_FUNC)? (VARS)* STMT_LOOP '}'

WINDOW_NAME ::= 'window_name' '(' 'name' ':' EXP ')'
WINDOW_FUNC ::= 'window' '(' 'width' ':' EXP ',' 'width' ':' EXP ')'

TYPE ::= (PRIMITIVE_TYPE  | FIGURE)

PRIMITIVE_TYPE ::= ('boolean' | 'int' | 'decimal' | 'string' )

FIGURE ::= ( 'point' | 'line' | 'triangle' | 'square' | 'rectangle' | 'polygon' | 'star' | 'circle')

FUNCTION ::= 'function' 'id' '(' (PARAMETERS)? ')' ('returns' PRIMITIVE_TYPE )?  '{' (VARS)* STMT_LOOP ('return' (EXP)?)? '}'

PARAMETERS::=  (('id' ':' TYPE) ( ',' 'id' ':' TYPE )*)

VAR_ARRAY_VER ::= '[' EXP ']'

FUNCTION_CALL ::= 'id' '(' CALL_PARAMETERS ')'

CALL_PARAMETERS ::= (('id' (VAR_ARRAY_VER)? ':' EXP) (',' 'id' (VAR_ARRAY_VER)? ':' EXP)*)

ASSIGNMENT ::= VAR_ID '=' '<& push_operator' EXP 

VAR_ID ::= 'id' '<& verify_variable' VAR_ARRAY_VER '<& push_id'

CYCLE ::= (WHILE | FOR)

WHILE ::= 'while' '(' CONDITION ')' DO_BLOCK

FOR ::= 'for' '(' (ASSIGNMENT)? ';' CONDITION ';' (INCREMENT | ASSIGNMENT) ')' DO_BLOCK

CAMERA::= 'camera' 'id' 

MOVE ::= 'move' 'id' '(' 'x' ':' EXP ',' 'y' ':' EXP ')'

WAIT ::= 'wait' 'id' '(' 'ms' ':' EXP  ')'

MOVE_SPEED ::= 'move_speed' 'id' '(' 'ms' ':' EXP  ')'

HIDE ::= 'hide' 'id'

SHOW ::= 'show' 'id'

BACKGROUND_COLOR ::= 'background_color' '(' 'r' ':' EXP ',' 'g' ':' EXP ',' 'b' ':' EXP ')'

TEXT_COLOR ::= 'text_color' '(' 'r' ':' EXP ',' 'g' ':' EXP ',' 'b' ':' EXP ')'

PRINT_G ::= 'printg' '(' 'text' ':' EXP ',' 'x' ':' EXP ',' 'y' ':' EXP ')'

CONDITION ::= EXPRESION (('and' | 'or') CONDITION )? 

EXPRESION ::= EXP (('>' | '<' | '!=' | '<=' | '>=') EXPRESION )?

EXP::= TERM (('+'| '-') EXP)?

TERM::= FACTOR (('*'| '/' | 'mod') TERM)*

FACTOR::= ( '(' CONDITION ')' | FUNCTION_CALL | LENGTH | SINE | COSINE | TANGENT | EXPONENTIAL | LOG10 | SQRT | POW | VAR_CTE )

LENGTH ::= 'length' '(' 'id' ')'
SINE ::= 'sin' '(' EXP ')'
COSINE ::= 'cos' '(' EXP ')'
TANGENT ::= 'tan' '(' EXP ')'
EXPONENTIAL ::= 'exp' '(' EXP ')'
LOG10 ::= 'log10' '(' EXP ')'
SQRT ::= 'sqrt' '(' EXP ')'
POW ::= 'pow' '(' EXP ',' EXP ')'

VAR_CTE ::= (VAR_ID | CNT_PRIM)

INCREMENT::= 'id' VAR_ARRAY_VER ( '+=' | '-=' ) EXP

IF::= 'if' '(' CONDITION ')' DO_BLOCK (ELSIF)* ELSE?

ELSIF ::= 'elsif' '(' CONDITION ')' DO_BLOCK

ELSE ::= 'else' DO_BLOCK

DO_BLOCK ::= 'do' (STMT_LOOP) 'end'

STMT_LOOP ::= ( ASSIGNMENT | IF | CYCLE | CAMERA | MOVE | WAIT | MOVE_SPEED | HIDE | SHOW | BACKGROUND_COLOR | TEXT_COLOR | PRINT_G | FUNCTION_CALL | PRINT | INCREMENT | FIGURE_DESCRIPTION | RETURN )*

VARS ::= (('var' 'id' ':' (VARS_PRIM | VARS_ARR)) | ('figure' 'id' ':' FIGURE ('has' FIG_CREATE_BLOCK)? ))

VARS_PRIM ::=  PRIMITIVE (INIT_PRIM)?

INIT_PRIM ::= '=' EXP

VARS_ARR ::= '[' PRIMITIVE_TYPE ']' '(' 'CTE_INT' ')' (CONITNUE_ARRAY)?

CONITNUE_ARRAY ::= '=' '{' ((EXP) ( ',' EXP)*) '}'
 
FIG_CREATE_BLOCK ::= (  ( FIG_ATTR) ( ','  FIG_ATTR)* )  'end'

FIG_ATTR::= (VECTOR | FIG_COLOR_ATTR | ('size' ':' EXP))

FIG_COLOR_ATTR ::= 'color' ':' '(' 'r' ':' EXP ',' 'g' ':' EXP ',' 'b' ':' EXP ')'

VECTOR::= 'v' ':' '(' 'x' ':' EXP ',' 'y' ':' EXP ')'

CNT_PRIM::= (  SIGN 'CTE_INT' | SIGN 'CTE_DECIMAL' | 'CTE_STRING' | 'CTE_BOOLEAN' )

SIGN ::= ('+' | '-')?

RETURN ::= 'return' ( EXP )?

PRINT ::= 'print' '(' EXP ')'

FIGURE_CREATIONS::= 'figure' 'id' ':' FIGURE 'has' FIGURE_CREATE_BLOCK

FIGURE_DESCRIPTION ::= 'id' 'has' FIGURE_CREATE_BLOCK


